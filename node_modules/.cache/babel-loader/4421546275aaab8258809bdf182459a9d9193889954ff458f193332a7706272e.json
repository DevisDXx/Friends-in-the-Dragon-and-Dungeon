{"ast":null,"code":"import { spriteToCoordinates } from './sprite-to-coordinates';\n\n/**\n * Get the value of the next tile that an entity will be moving to\n *\n * @param {*} world The world that the game is being played in\n * @param {*} newPos The position the entity is trying to move to\n */\nexport default function getNextTile(world, newPos) {\n  const {\n    gameMode,\n    storyMaps,\n    currentMap,\n    randomMaps,\n    floorNum\n  } = world;\n  let currentMapData;\n  if (gameMode === 'story') {\n    currentMapData = storyMaps[currentMap];\n  } else {\n    currentMapData = randomMaps[floorNum - 1];\n  }\n  const {\n    tiles\n  } = currentMapData;\n  // Convert the sprite coordinates to real coordinates\n  const {\n    x,\n    y\n  } = spriteToCoordinates(newPos);\n\n  // Safely return the tiles value, otherwise return a wall\n  return tiles[y] && tiles[y][x] ? tiles[y][x].value : 5;\n}","map":{"version":3,"names":["spriteToCoordinates","getNextTile","world","newPos","gameMode","storyMaps","currentMap","randomMaps","floorNum","currentMapData","tiles","x","y","value"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/utils/get-next-tile.js"],"sourcesContent":["import { spriteToCoordinates } from './sprite-to-coordinates';\n\n/**\n * Get the value of the next tile that an entity will be moving to\n *\n * @param {*} world The world that the game is being played in\n * @param {*} newPos The position the entity is trying to move to\n */\nexport default function getNextTile(world, newPos) {\n  const { gameMode, storyMaps, currentMap, randomMaps, floorNum } = world;\n\n  let currentMapData;\n  if (gameMode === 'story') {\n    currentMapData = storyMaps[currentMap];\n  } else {\n    currentMapData = randomMaps[floorNum - 1];\n  }\n\n  const { tiles } = currentMapData;\n  // Convert the sprite coordinates to real coordinates\n  const { x, y } = spriteToCoordinates(newPos);\n\n  // Safely return the tiles value, otherwise return a wall\n  return tiles[y] && tiles[y][x] ? tiles[y][x].value : 5;\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,yBAAyB;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACjD,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGN,KAAK;EAEvE,IAAIO,cAAc;EAClB,IAAIL,QAAQ,KAAK,OAAO,EAAE;IACxBK,cAAc,GAAGJ,SAAS,CAACC,UAAU,CAAC;EACxC,CAAC,MAAM;IACLG,cAAc,GAAGF,UAAU,CAACC,QAAQ,GAAG,CAAC,CAAC;EAC3C;EAEA,MAAM;IAAEE;EAAM,CAAC,GAAGD,cAAc;EAChC;EACA,MAAM;IAAEE,CAAC;IAAEC;EAAE,CAAC,GAAGZ,mBAAmB,CAACG,MAAM,CAAC;;EAE5C;EACA,OAAOO,KAAK,CAACE,CAAC,CAAC,IAAIF,KAAK,CAACE,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGD,KAAK,CAACE,CAAC,CAAC,CAACD,CAAC,CAAC,CAACE,KAAK,GAAG,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}