{"ast":null,"code":"import { calculateDamage } from '../../../utils/dice';\nimport { SHOCK_DAMAGE, SPRITE_SIZE } from '../../../config/constants';\n\n/**\n * An AI for monsters that have become shocked by the player\n *\n * @param {*} sightBox The players FOV\n * @param {*} currentMap The map the player is in\n * @param {*} monster The monster we're moving\n */\nexport default function shocked(sightBox, currentMap, monster) {\n  return (dispatch, getState) => {\n    const {\n      stats\n    } = getState();\n    let dead = false;\n    const damage = calculateDamage(SHOCK_DAMAGE);\n    dispatch({\n      type: 'DAMAGE_TO_MONSTER',\n      payload: {\n        damage,\n        id: monster.id,\n        map: currentMap,\n        entity: monster.type,\n        from: 'shock'\n      }\n    });\n    if (monster.hp - damage <= 0) {\n      dead = true;\n      // and get some exp\n      dispatch({\n        type: 'GET_EXP',\n        payload: monster.exp\n      });\n      if (stats.exp + monster.exp >= stats.expToLevel) {\n        dispatch({\n          type: 'PAUSE',\n          payload: {\n            pause: true,\n            levelUp: true\n          }\n        });\n      }\n      // play death sound\n      dispatch({\n        type: 'MONSTER_DIED',\n        payload: monster.type\n      });\n\n      // replace monster will blood spill\n      // need to pass relative tile index\n      dispatch({\n        type: 'ADD_BLOOD_SPILL',\n        payload: {\n          x: monster.position[0] / SPRITE_SIZE,\n          y: monster.position[1] / SPRITE_SIZE\n        }\n      });\n    }\n    if (!dead && monster.aiTurns === 0) {\n      dispatch({\n        type: 'CHANGE_AI',\n        payload: {\n          map: currentMap,\n          ai: monster.originalAI,\n          id: monster.id,\n          from: 'shocked',\n          turns: 0,\n          entity: monster.type,\n          original: monster.originalAI\n        }\n      });\n    }\n  };\n}","map":{"version":3,"names":["calculateDamage","SHOCK_DAMAGE","SPRITE_SIZE","shocked","sightBox","currentMap","monster","dispatch","getState","stats","dead","damage","type","payload","id","map","entity","from","hp","exp","expToLevel","pause","levelUp","x","position","y","aiTurns","ai","originalAI","turns","original"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/actions/shocked-ai.jsx"],"sourcesContent":["import { calculateDamage } from '../../../utils/dice';\nimport { SHOCK_DAMAGE, SPRITE_SIZE } from '../../../config/constants';\n\n/**\n * An AI for monsters that have become shocked by the player\n *\n * @param {*} sightBox The players FOV\n * @param {*} currentMap The map the player is in\n * @param {*} monster The monster we're moving\n */\nexport default function shocked(sightBox, currentMap, monster) {\n  return (dispatch, getState) => {\n    const { stats } = getState();\n\n    let dead = false;\n    const damage = calculateDamage(SHOCK_DAMAGE);\n\n    dispatch({\n      type: 'DAMAGE_TO_MONSTER',\n      payload: {\n        damage,\n        id: monster.id,\n        map: currentMap,\n        entity: monster.type,\n        from: 'shock',\n      },\n    });\n\n    if (monster.hp - damage <= 0) {\n      dead = true;\n      // and get some exp\n      dispatch({\n        type: 'GET_EXP',\n        payload: monster.exp,\n      });\n\n      if (stats.exp + monster.exp >= stats.expToLevel) {\n        dispatch({\n          type: 'PAUSE',\n          payload: {\n            pause: true,\n            levelUp: true,\n          },\n        });\n      }\n      // play death sound\n      dispatch({\n        type: 'MONSTER_DIED',\n        payload: monster.type,\n      });\n\n      // replace monster will blood spill\n      // need to pass relative tile index\n      dispatch({\n        type: 'ADD_BLOOD_SPILL',\n        payload: {\n          x: monster.position[0] / SPRITE_SIZE,\n          y: monster.position[1] / SPRITE_SIZE,\n        },\n      });\n    }\n\n    if (!dead && monster.aiTurns === 0) {\n      dispatch({\n        type: 'CHANGE_AI',\n        payload: {\n          map: currentMap,\n          ai: monster.originalAI,\n          id: monster.id,\n          from: 'shocked',\n          turns: 0,\n          entity: monster.type,\n          original: monster.originalAI,\n        },\n      });\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,qBAAqB;AACrD,SAASC,YAAY,EAAEC,WAAW,QAAQ,2BAA2B;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAOA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC7D,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,MAAM;MAAEC;IAAM,CAAC,GAAGD,QAAQ,CAAC,CAAC;IAE5B,IAAIE,IAAI,GAAG,KAAK;IAChB,MAAMC,MAAM,GAAGX,eAAe,CAACC,YAAY,CAAC;IAE5CM,QAAQ,CAAC;MACPK,IAAI,EAAE,mBAAmB;MACzBC,OAAO,EAAE;QACPF,MAAM;QACNG,EAAE,EAAER,OAAO,CAACQ,EAAE;QACdC,GAAG,EAAEV,UAAU;QACfW,MAAM,EAAEV,OAAO,CAACM,IAAI;QACpBK,IAAI,EAAE;MACR;IACF,CAAC,CAAC;IAEF,IAAIX,OAAO,CAACY,EAAE,GAAGP,MAAM,IAAI,CAAC,EAAE;MAC5BD,IAAI,GAAG,IAAI;MACX;MACAH,QAAQ,CAAC;QACPK,IAAI,EAAE,SAAS;QACfC,OAAO,EAAEP,OAAO,CAACa;MACnB,CAAC,CAAC;MAEF,IAAIV,KAAK,CAACU,GAAG,GAAGb,OAAO,CAACa,GAAG,IAAIV,KAAK,CAACW,UAAU,EAAE;QAC/Cb,QAAQ,CAAC;UACPK,IAAI,EAAE,OAAO;UACbC,OAAO,EAAE;YACPQ,KAAK,EAAE,IAAI;YACXC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;MACJ;MACA;MACAf,QAAQ,CAAC;QACPK,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAEP,OAAO,CAACM;MACnB,CAAC,CAAC;;MAEF;MACA;MACAL,QAAQ,CAAC;QACPK,IAAI,EAAE,iBAAiB;QACvBC,OAAO,EAAE;UACPU,CAAC,EAAEjB,OAAO,CAACkB,QAAQ,CAAC,CAAC,CAAC,GAAGtB,WAAW;UACpCuB,CAAC,EAAEnB,OAAO,CAACkB,QAAQ,CAAC,CAAC,CAAC,GAAGtB;QAC3B;MACF,CAAC,CAAC;IACJ;IAEA,IAAI,CAACQ,IAAI,IAAIJ,OAAO,CAACoB,OAAO,KAAK,CAAC,EAAE;MAClCnB,QAAQ,CAAC;QACPK,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE;UACPE,GAAG,EAAEV,UAAU;UACfsB,EAAE,EAAErB,OAAO,CAACsB,UAAU;UACtBd,EAAE,EAAER,OAAO,CAACQ,EAAE;UACdG,IAAI,EAAE,SAAS;UACfY,KAAK,EAAE,CAAC;UACRb,MAAM,EAAEV,OAAO,CAACM,IAAI;UACpBkB,QAAQ,EAAExB,OAAO,CAACsB;QACpB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}