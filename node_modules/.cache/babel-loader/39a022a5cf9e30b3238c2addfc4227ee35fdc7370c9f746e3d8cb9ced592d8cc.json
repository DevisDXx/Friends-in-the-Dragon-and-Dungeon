{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devis\\\\Downloads\\\\react-rpg.com-master\\\\src\\\\features\\\\world\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactTimeout from 'react-timeout';\nimport Controls from '../player/controls';\nimport exploreTiles from '../player/actions/explore-tiles';\nimport Player from '../player';\nimport GameMap from '../map';\nimport Monsters from '../monsters';\nimport loadMonsters from '../monsters/actions/load-monsters';\nimport takeMonstersTurn from '../monsters/actions/take-monsters-turn';\nimport { MAP_TRANSITION_DELAY } from '../../config/constants';\nimport './styles.scss';\n\n// animation time is 500(ms), adding +100 makes it smoother\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MAP_TRANSITION = MAP_TRANSITION_DELAY + 100;\nclass World extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      opacity: 0\n    };\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // reload the tiles and monsters if it's a new map\n    // and there is a current map\n    // and it's not the game start\n    if (prevProps.world.mapTransition !== this.props.world.mapTransition && prevProps.world.currentMap !== null && this.props.dialog.gameStart !== true) {\n      this.handleMapTransition();\n    }\n    // if a turn has been taken, and the game hasn't just restarted, and the map didn't change\n    else if (prevProps.world.turn !== this.props.world.turn && this.props.world.turn !== 0 && prevProps.world.currentMap === this.props.world.currentMap) {\n      // take monster turn\n      this.props.takeMonstersTurn();\n    }\n  }\n  handleMapTransition() {\n    const {\n      player,\n      exploreTiles\n    } = this.props;\n    // fade the map transition component to black\n    this.setState({\n      opacity: 1\n    }, () => {\n      // after a delay, fade the map transition with the new map loaded\n      this.props.setTimeout(() => {\n        exploreTiles(player.position);\n        this.props.loadMonsters();\n        this.setState({\n          opacity: 0\n        });\n      }, MAP_TRANSITION);\n    });\n  }\n  render() {\n    const {\n      opacity\n    } = this.state;\n    const {\n      appState,\n      player\n    } = this.props;\n    const {\n      largeView\n    } = appState;\n    const {\n      position\n    } = player;\n    // calculate the offset for the world map according to player position\n    // so that the viewport is always centered\n    const mapOffset = largeView ? 180 : 155;\n    const worldTop = mapOffset - position[1];\n    const worldLeft = mapOffset - position[0];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"world__container\",\n        style: {\n          top: worldTop,\n          left: worldLeft\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GameMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Monsters, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"world__map-transition\",\n        style: {\n          opacity\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}\nconst mapStateToProps = _ref => {\n  let {\n    appState,\n    world,\n    player,\n    dialog\n  } = _ref;\n  return {\n    appState,\n    world,\n    player,\n    dialog\n  };\n};\nconst actions = {\n  exploreTiles,\n  loadMonsters,\n  takeMonstersTurn\n};\nexport default connect(mapStateToProps, actions)(ReactTimeout(World));","map":{"version":3,"names":["React","Component","connect","ReactTimeout","Controls","exploreTiles","Player","GameMap","Monsters","loadMonsters","takeMonstersTurn","MAP_TRANSITION_DELAY","jsxDEV","_jsxDEV","Fragment","_Fragment","MAP_TRANSITION","World","constructor","props","state","opacity","componentDidUpdate","prevProps","prevState","world","mapTransition","currentMap","dialog","gameStart","handleMapTransition","turn","player","setState","setTimeout","position","render","appState","largeView","mapOffset","worldTop","worldLeft","children","className","style","top","left","fileName","_jsxFileName","lineNumber","columnNumber","mapStateToProps","_ref","actions"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/world/index.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactTimeout from 'react-timeout';\n\nimport Controls from '../player/controls';\nimport exploreTiles from '../player/actions/explore-tiles';\nimport Player from '../player';\nimport GameMap from '../map';\nimport Monsters from '../monsters';\nimport loadMonsters from '../monsters/actions/load-monsters';\nimport takeMonstersTurn from '../monsters/actions/take-monsters-turn';\nimport { MAP_TRANSITION_DELAY } from '../../config/constants';\n\nimport './styles.scss';\n\n// animation time is 500(ms), adding +100 makes it smoother\nconst MAP_TRANSITION = MAP_TRANSITION_DELAY + 100;\n\nclass World extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            opacity: 0,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // reload the tiles and monsters if it's a new map\n        // and there is a current map\n        // and it's not the game start\n        if (\n            prevProps.world.mapTransition !== this.props.world.mapTransition &&\n            prevProps.world.currentMap !== null &&\n            this.props.dialog.gameStart !== true\n        ) {\n            this.handleMapTransition();\n        }\n        // if a turn has been taken, and the game hasn't just restarted, and the map didn't change\n        else if (\n            prevProps.world.turn !== this.props.world.turn &&\n            this.props.world.turn !== 0 &&\n            prevProps.world.currentMap === this.props.world.currentMap\n        ) {\n            // take monster turn\n            this.props.takeMonstersTurn();\n        }\n    }\n\n    handleMapTransition() {\n        const { player, exploreTiles } = this.props;\n        // fade the map transition component to black\n        this.setState({ opacity: 1 }, () => {\n            // after a delay, fade the map transition with the new map loaded\n            this.props.setTimeout(() => {\n                exploreTiles(player.position);\n                this.props.loadMonsters();\n                this.setState({ opacity: 0 });\n            }, MAP_TRANSITION);\n        });\n    }\n\n    render() {\n        const { opacity } = this.state;\n        const { appState, player } = this.props;\n        const { largeView } = appState;\n        const { position } = player;\n        // calculate the offset for the world map according to player position\n        // so that the viewport is always centered\n        const mapOffset = largeView ? 180 : 155;\n        const worldTop = mapOffset - position[1];\n        const worldLeft = mapOffset - position[0];\n\n        return (\n            <>\n                <div\n                    className=\"world__container\"\n                    style={{\n                        top: worldTop,\n                        left: worldLeft,\n                    }}\n                >\n                    <Controls />\n\n                    <GameMap />\n\n                    <Player />\n\n                    <Monsters />\n                </div>\n\n                <div className=\"world__map-transition\" style={{ opacity }} />\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = ({ appState, world, player, dialog }) => ({\n    appState,\n    world,\n    player,\n    dialog,\n});\n\nconst actions = { exploreTiles, loadMonsters, takeMonstersTurn };\n\nexport default connect(mapStateToProps, actions)(ReactTimeout(World));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}