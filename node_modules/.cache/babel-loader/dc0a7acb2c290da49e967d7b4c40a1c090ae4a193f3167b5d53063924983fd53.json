{"ast":null,"code":"import _objectSpread from \"C:/Users/devis/Downloads/react-rpg.com-master/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\devis\\\\Downloads\\\\react-rpg.com-master\\\\src\\\\features\\\\journal\\\\reducer.jsx\",\n  _this = this;\nimport React from 'react';\nimport cloneDeep from 'lodash.clonedeep';\nimport uuidv4 from '../../utils/uuid-v4';\nimport isAbilityAllocationLevel from '../../utils/is-ability-allocation-level';\nimport { LEVEL_UP_ABILITY_POINTS, MAX_JOURNAL_ENTRIES } from '../../config/constants';\nimport spells from '../../data/spells';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  entries: [],\n  scroll: true\n};\nconst aOrAn = nextWord => 'aeiou'.includes(nextWord.toLowerCase().charAt(0)) ? 'an' : 'a';\nconst colourise = (value, type) => /*#__PURE__*/_jsxDEV(\"span\", {\n  className: type,\n  children: value\n}, uuidv4(), false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 5\n}, this);\nconst journalReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n  if (state.entries.length > MAX_JOURNAL_ENTRIES) {\n    // Make sure we don't keep too many entries so we use less memory and don't slow down the game\n    state.entries = state.entries.slice(state.entries.length - MAX_JOURNAL_ENTRIES);\n  }\n  switch (type) {\n    case 'MONSTER_ABILITY_CHECK':\n      {\n        const {\n          entity,\n          attackValue,\n          check,\n          against,\n          defender\n        } = payload;\n        newState = cloneDeep(state);\n        if (defender === 'player') {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" attacked you with an attack value of \", colourise(attackValue, 'score'), ' ', \"against your \", colourise(against, 'ability'), \" value of \", colourise(check, 'score')]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 25\n            }, _this)\n          });\n        } else {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" attacked the\", ' ', colourise(defender, ''), \" with an attack value of\", ' ', colourise(attackValue, 'score'), \" against their\", ' ', colourise(against, 'ability'), \" value of\", ' ', colourise(check, 'score')]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 25\n            }, _this)\n          });\n        }\n        return newState;\n      }\n    case 'CRITICAL_HIT':\n      {\n        const {\n          ability,\n          roll\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You performed \", aOrAn(ability), ' ', colourise(ability, 'ability'), \" check and rolled a\", ' ', colourise(roll, 'score'), \",\", colourise(' critical hit!', 'damage-to-monster')]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'ABILITY_CHECK':\n      {\n        const {\n          ability,\n          entity,\n          roll,\n          check,\n          against\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You performed \", aOrAn(ability), ' ', colourise(ability, 'ability'), \" check and rolled\", ' ', colourise(roll, 'score'), \", which\", ' ', roll >= check ? 'succeeded' : 'failed', \" against the\", ' ', colourise(against, 'ability'), \" value of\", ' ', colourise(check, 'score'), \" for the\", ' ', colourise(entity, 'type')]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'HEAL_HP':\n      {\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You restored \", colourise(payload, 'restore-health'), ' ', \"health!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'RESTORE_MANA':\n      {\n        if (payload.kind === 'passive') return state;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You restored \", colourise(payload.amount, 'restore-mana'), ' ', \"mana!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'DAMAGE_TO_PLAYER':\n      {\n        const {\n          entity,\n          damage,\n          kind,\n          effect\n        } = payload;\n        newState = cloneDeep(state);\n        if (kind === 'suicide') {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" committed suicide, dealing \", colourise(damage, 'damage-to-player'), ' ', \"damage to you!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 25\n            }, _this)\n          });\n        } else if (effect !== undefined) {\n          // The player was damaged by an effect applied to them\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You took \", colourise(damage, 'damage-to-player'), ' ', \"damage from \", colourise(effect, 'ai'), \"!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, _this)\n          });\n        } else {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: payload.damage === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" missed you!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, _this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" dealt\", ' ', colourise(damage, 'damage-to-player'), \" damage to you!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, _this)\n          });\n        }\n        return newState;\n      }\n    case 'DAMAGE_TO_MONSTER':\n      {\n        const {\n          entity,\n          damage,\n          from\n        } = payload;\n        newState = cloneDeep(state);\n        if (from === 'player') {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: damage === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You missed the \", colourise(entity, 'type'), \"!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, _this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You dealt\", ' ', colourise(damage, 'damage-to-monster'), \" damage to the \", colourise(entity, 'type'), \"!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, _this)\n          });\n        } else if (from === 'suicide') {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" killed itself!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 25\n            }, _this)\n          });\n        } else {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" took\", ' ', colourise(damage, 'damage-to-monster'), \" damage from the \", colourise(from, 'damage-type'), \"!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 25\n            }, _this)\n          });\n        }\n        return newState;\n      }\n    case 'MONSTER_HEAL_HP':\n      {\n        const {\n          entity,\n          healAmount\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The \", colourise(entity, 'type'), \" healed\", ' ', colourise(healAmount, 'health-gain'), \" health!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'MONSTER_DIED':\n      {\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You vanquished the \", colourise(payload, 'type'), \"!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'USE_PROJECTILE':\n      {\n        const {\n          name,\n          information\n        } = payload.projectile;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You \", information, \" \", colourise(name, 'projectile')]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'MONSTER_USE_PROJECTILE':\n      {\n        const {\n          projectile,\n          entity\n        } = payload;\n        const {\n          name,\n          information\n        } = projectile;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The \", colourise(entity, 'type'), \" \", information, ' ', colourise(name, 'projectile')]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'CAST_SPELL':\n      {\n        const {\n          name\n        } = payload.projectile;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You cast \", colourise(name, 'spell-cast')]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'MONSTER_CAST_SPELL':\n      {\n        const {\n          entity,\n          spell\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The \", colourise(entity, 'type'), \" cast\", ' ', colourise(spell.name, 'spell-cast'), \"!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'EFFECT_PLAYER':\n      {\n        const {\n          effect\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You were \", colourise(effect, 'ai'), \"!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'CHANGE_AI':\n      {\n        const {\n          from,\n          ai,\n          entity,\n          original\n        } = payload;\n        newState = cloneDeep(state);\n        if (from !== original && from !== ai) {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" stopped being\", ' ', colourise(from, 'ai'), \"!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 25\n            }, _this)\n          });\n        } else {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The \", colourise(entity, 'type'), \" was\", ' ', colourise(ai, 'ai'), \"!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 25\n            }, _this)\n          });\n        }\n        return newState;\n      }\n    case 'GET_ITEM':\n      {\n        const {\n          name\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You gained an item: \", colourise(name, 'get-item')]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'GET_EXP':\n      {\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You gained \", colourise(payload, 'experience'), ' ', \"experience!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'GET_GOLD':\n      {\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You gained \", colourise(payload, 'gold'), \" gold!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 21\n          }, _this)\n        });\n        return newState;\n      }\n    case 'LEVEL_UP':\n      {\n        const {\n          level,\n          hp,\n          mana\n        } = payload;\n        newState = cloneDeep(state);\n        newState.entries.push({\n          key: uuidv4(),\n          entry: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You reached level \", colourise(level, 'level'), \", gained\", ' ', colourise(hp, 'health-gain'), \" health and\", ' ', colourise(mana, 'mana-gain'), \" mana!\"]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 21\n          }, _this)\n        });\n        if (isAbilityAllocationLevel(level)) {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You gained\", ' ', colourise(LEVEL_UP_ABILITY_POINTS, 'level'), ' ', \"ability points!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 25\n            }, _this)\n          });\n        }\n        const unlockedSpell = spells.filter(spell => spell.unlockLevel === level).pop();\n        if (unlockedSpell) {\n          newState.entries.push({\n            key: uuidv4(),\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You unlocked the\", ' ', colourise(unlockedSpell.name, 'level'), \" spell!\"]\n            }, uuidv4(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 25\n            }, _this)\n          });\n        }\n        return newState;\n      }\n    case 'SET_JOURNAL_SCROLLING':\n      newState = cloneDeep(state);\n      newState.scroll = payload;\n      return newState;\n    case 'persist/REHYDRATE':\n    case 'LOAD_DATA':\n      {\n        if (!(payload && payload.journal)) return initialState;\n        newState = cloneDeep(payload.journal);\n        newState.entries = newState.entries.map(_ref => {\n          let {\n            key,\n            entry\n          } = _ref;\n          return {\n            key,\n            entry: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: entry.props.children.map(child => {\n                if (child.props) {\n                  return colourise(child.props.children, child.props.className);\n                } else {\n                  return child;\n                }\n              })\n            }, entry.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 21\n            }, _this)\n          };\n        });\n        return _objectSpread(_objectSpread({}, initialState), newState);\n      }\n    case 'RESET':\n      return _objectSpread({}, initialState);\n    default:\n      return state;\n  }\n};\nexport default journalReducer;","map":{"version":3,"names":["React","cloneDeep","uuidv4","isAbilityAllocationLevel","LEVEL_UP_ABILITY_POINTS","MAX_JOURNAL_ENTRIES","spells","jsxDEV","_jsxDEV","initialState","entries","scroll","aOrAn","nextWord","includes","toLowerCase","charAt","colourise","value","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","journalReducer","state","arguments","length","undefined","payload","newState","slice","entity","attackValue","check","against","defender","push","key","entry","_this","ability","roll","kind","amount","damage","effect","from","healAmount","name","information","projectile","spell","ai","original","level","hp","mana","unlockedSpell","filter","unlockLevel","pop","journal","map","_ref","props","child","_objectSpread"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/journal/reducer.jsx"],"sourcesContent":["import React from 'react';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport uuidv4 from '../../utils/uuid-v4';\nimport isAbilityAllocationLevel from '../../utils/is-ability-allocation-level';\nimport {\n    LEVEL_UP_ABILITY_POINTS,\n    MAX_JOURNAL_ENTRIES,\n} from '../../config/constants';\nimport spells from '../../data/spells';\n\nconst initialState = {\n    entries: [],\n    scroll: true,\n};\n\nconst aOrAn = nextWord =>\n    'aeiou'.includes(nextWord.toLowerCase().charAt(0)) ? 'an' : 'a';\n\nconst colourise = (value, type) => (\n    <span key={uuidv4()} className={type}>\n        {value}\n    </span>\n);\n\nconst journalReducer = (state = initialState, { type, payload }) => {\n    let newState;\n\n    if (state.entries.length > MAX_JOURNAL_ENTRIES) {\n        // Make sure we don't keep too many entries so we use less memory and don't slow down the game\n        state.entries = state.entries.slice(\n            state.entries.length - MAX_JOURNAL_ENTRIES\n        );\n    }\n\n    switch (type) {\n        case 'MONSTER_ABILITY_CHECK': {\n            const { entity, attackValue, check, against, defender } = payload;\n\n            newState = cloneDeep(state);\n\n            if (defender === 'player') {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} attacked you with an\n                            attack value of {colourise(attackValue, 'score')}{' '}\n                            against your {colourise(against, 'ability')} value\n                            of {colourise(check, 'score')}\n                        </p>\n                    ),\n                });\n            } else {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} attacked the{' '}\n                            {colourise(defender, '')} with an attack value of{' '}\n                            {colourise(attackValue, 'score')} against their{' '}\n                            {colourise(against, 'ability')} value of{' '}\n                            {colourise(check, 'score')}\n                        </p>\n                    ),\n                });\n            }\n            return newState;\n        }\n\n        case 'CRITICAL_HIT': {\n            const { ability, roll } = payload;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You performed {aOrAn(ability)}{' '}\n                        {colourise(ability, 'ability')} check and rolled a{' '}\n                        {colourise(roll, 'score')},\n                        {colourise(' critical hit!', 'damage-to-monster')}\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'ABILITY_CHECK': {\n            const { ability, entity, roll, check, against } = payload;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You performed {aOrAn(ability)}{' '}\n                        {colourise(ability, 'ability')} check and rolled{' '}\n                        {colourise(roll, 'score')}, which{' '}\n                        {roll >= check ? 'succeeded' : 'failed'} against the{' '}\n                        {colourise(against, 'ability')} value of{' '}\n                        {colourise(check, 'score')} for the{' '}\n                        {colourise(entity, 'type')}\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'HEAL_HP': {\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You restored {colourise(payload, 'restore-health')}{' '}\n                        health!\n                    </p>\n                ),\n            });\n            return newState;\n        }\n\n        case 'RESTORE_MANA': {\n            if (payload.kind === 'passive') return state;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You restored {colourise(payload.amount, 'restore-mana')}{' '}\n                        mana!\n                    </p>\n                ),\n            });\n            return newState;\n        }\n\n        case 'DAMAGE_TO_PLAYER': {\n            const { entity, damage, kind, effect } = payload;\n            newState = cloneDeep(state);\n\n            if (kind === 'suicide') {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} committed suicide,\n                            dealing {colourise(damage, 'damage-to-player')}{' '}\n                            damage to you!\n                        </p>\n                    ),\n                });\n            } else if (effect !== undefined) {\n                // The player was damaged by an effect applied to them\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            You took {colourise(damage, 'damage-to-player')}{' '}\n                            damage from {colourise(effect, 'ai')}!\n                        </p>\n                    ),\n                });\n            } else {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry:\n                        payload.damage === 0 ? (\n                            <p key={uuidv4()}>\n                                The {colourise(entity, 'type')} missed you!\n                            </p>\n                        ) : (\n                            <p key={uuidv4()}>\n                                The {colourise(entity, 'type')} dealt{' '}\n                                {colourise(damage, 'damage-to-player')} damage\n                                to you!\n                            </p>\n                        ),\n                });\n            }\n            return newState;\n        }\n\n        case 'DAMAGE_TO_MONSTER': {\n            const { entity, damage, from } = payload;\n\n            newState = cloneDeep(state);\n\n            if (from === 'player') {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry:\n                        damage === 0 ? (\n                            <p key={uuidv4()}>\n                                You missed the {colourise(entity, 'type')}!\n                            </p>\n                        ) : (\n                            <p key={uuidv4()}>\n                                You dealt{' '}\n                                {colourise(damage, 'damage-to-monster')} damage\n                                to the {colourise(entity, 'type')}!\n                            </p>\n                        ),\n                });\n            } else if (from === 'suicide') {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} killed itself!\n                        </p>\n                    ),\n                });\n            } else {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} took{' '}\n                            {colourise(damage, 'damage-to-monster')} damage from\n                            the {colourise(from, 'damage-type')}!\n                        </p>\n                    ),\n                });\n            }\n            return newState;\n        }\n\n        case 'MONSTER_HEAL_HP': {\n            const { entity, healAmount } = payload;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        The {colourise(entity, 'type')} healed{' '}\n                        {colourise(healAmount, 'health-gain')} health!\n                    </p>\n                ),\n            });\n            return newState;\n        }\n\n        case 'MONSTER_DIED': {\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You vanquished the {colourise(payload, 'type')}!\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'USE_PROJECTILE': {\n            const { name, information } = payload.projectile;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You {information} {colourise(name, 'projectile')}\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'MONSTER_USE_PROJECTILE': {\n            const { projectile, entity } = payload;\n            const { name, information } = projectile;\n\n            newState = cloneDeep(state);\n\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        The {colourise(entity, 'type')} {information}{' '}\n                        {colourise(name, 'projectile')}\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'CAST_SPELL': {\n            const { name } = payload.projectile;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You cast {colourise(name, 'spell-cast')}\n                    </p>\n                ),\n            });\n            return newState;\n        }\n\n        case 'MONSTER_CAST_SPELL': {\n            const { entity, spell } = payload;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        The {colourise(entity, 'type')} cast{' '}\n                        {colourise(spell.name, 'spell-cast')}!\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'EFFECT_PLAYER': {\n            const { effect } = payload;\n            newState = cloneDeep(state);\n\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>You were {colourise(effect, 'ai')}!</p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'CHANGE_AI': {\n            const { from, ai, entity, original } = payload;\n\n            newState = cloneDeep(state);\n\n            if (from !== original && from !== ai) {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} stopped being{' '}\n                            {colourise(from, 'ai')}!\n                        </p>\n                    ),\n                });\n            } else {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            The {colourise(entity, 'type')} was{' '}\n                            {colourise(ai, 'ai')}!\n                        </p>\n                    ),\n                });\n            }\n\n            return newState;\n        }\n\n        case 'GET_ITEM': {\n            const { name } = payload;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You gained an item: {colourise(name, 'get-item')}\n                    </p>\n                ),\n            });\n            return newState;\n        }\n\n        case 'GET_EXP': {\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You gained {colourise(payload, 'experience')}{' '}\n                        experience!\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'GET_GOLD': {\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You gained {colourise(payload, 'gold')} gold!\n                    </p>\n                ),\n            });\n\n            return newState;\n        }\n\n        case 'LEVEL_UP': {\n            const { level, hp, mana } = payload;\n\n            newState = cloneDeep(state);\n            newState.entries.push({\n                key: uuidv4(),\n                entry: (\n                    <p key={uuidv4()}>\n                        You reached level {colourise(level, 'level')}, gained{' '}\n                        {colourise(hp, 'health-gain')} health and{' '}\n                        {colourise(mana, 'mana-gain')} mana!\n                    </p>\n                ),\n            });\n\n            if (isAbilityAllocationLevel(level)) {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            You gained{' '}\n                            {colourise(LEVEL_UP_ABILITY_POINTS, 'level')}{' '}\n                            ability points!\n                        </p>\n                    ),\n                });\n            }\n\n            const unlockedSpell = spells\n                .filter(spell => spell.unlockLevel === level)\n                .pop();\n\n            if (unlockedSpell) {\n                newState.entries.push({\n                    key: uuidv4(),\n                    entry: (\n                        <p key={uuidv4()}>\n                            You unlocked the{' '}\n                            {colourise(unlockedSpell.name, 'level')} spell!\n                        </p>\n                    ),\n                });\n            }\n\n            return newState;\n        }\n\n        case 'SET_JOURNAL_SCROLLING':\n            newState = cloneDeep(state);\n            newState.scroll = payload;\n            return newState;\n\n        case 'persist/REHYDRATE':\n        case 'LOAD_DATA': {\n            if (!(payload && payload.journal)) return initialState;\n\n            newState = cloneDeep(payload.journal);\n            newState.entries = newState.entries.map(({ key, entry }) => ({\n                key,\n                entry: (\n                    <p key={entry.key}>\n                        {entry.props.children.map(child => {\n                            if (child.props) {\n                                return colourise(\n                                    child.props.children,\n                                    child.props.className\n                                );\n                            } else {\n                                return child;\n                            }\n                        })}\n                    </p>\n                ),\n            }));\n            return { ...initialState, ...newState };\n        }\n\n        case 'RESET':\n            return { ...initialState };\n\n        default:\n            return state;\n    }\n};\n\nexport default journalReducer;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,kBAAkB;AAExC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,wBAAwB,MAAM,yCAAyC;AAC9E,SACIC,uBAAuB,EACvBC,mBAAmB,QAChB,wBAAwB;AAC/B,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,KAAK,GAAGC,QAAQ,IAClB,OAAO,CAACC,QAAQ,CAACD,QAAQ,CAACE,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG;AAEnE,MAAMC,SAAS,GAAGA,CAACC,KAAK,EAAEC,IAAI,kBAC1BX,OAAA;EAAqBY,SAAS,EAAED,IAAK;EAAAE,QAAA,EAChCH;AAAK,GADChB,MAAM,CAAC,CAAC;EAAAoB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAEb,CACT;AAED,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAA6C;EAAA,IAA5CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGnB,YAAY;EAAA,IAAE;IAAEU,IAAI;IAAEY;EAAQ,CAAC,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC3D,IAAIE,QAAQ;EAEZ,IAAIL,KAAK,CAACjB,OAAO,CAACmB,MAAM,GAAGxB,mBAAmB,EAAE;IAC5C;IACAsB,KAAK,CAACjB,OAAO,GAAGiB,KAAK,CAACjB,OAAO,CAACuB,KAAK,CAC/BN,KAAK,CAACjB,OAAO,CAACmB,MAAM,GAAGxB,mBAC3B,CAAC;EACL;EAEA,QAAQc,IAAI;IACR,KAAK,uBAAuB;MAAE;QAC1B,MAAM;UAAEe,MAAM;UAAEC,WAAW;UAAEC,KAAK;UAAEC,OAAO;UAAEC;QAAS,CAAC,GAAGP,OAAO;QAEjEC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAE3B,IAAIW,QAAQ,KAAK,QAAQ,EAAE;UACvBN,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,wCACf,EAACjB,SAAS,CAACkB,WAAW,EAAE,OAAO,CAAC,EAAE,GAAG,EAAC,eACzC,EAAClB,SAAS,CAACoB,OAAO,EAAE,SAAS,CAAC,EAAC,YACzC,EAACpB,SAAS,CAACmB,KAAK,EAAE,OAAO,CAAC;YAAA,GAJzBlC,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAKb;UAEX,CAAC,CAAC;QACN,CAAC,MAAM;UACHV,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,eAAa,EAAC,GAAG,EAC/CjB,SAAS,CAACqB,QAAQ,EAAE,EAAE,CAAC,EAAC,0BAAwB,EAAC,GAAG,EACpDrB,SAAS,CAACkB,WAAW,EAAE,OAAO,CAAC,EAAC,gBAAc,EAAC,GAAG,EAClDlB,SAAS,CAACoB,OAAO,EAAE,SAAS,CAAC,EAAC,WAAS,EAAC,GAAG,EAC3CpB,SAAS,CAACmB,KAAK,EAAE,OAAO,CAAC;YAAA,GALtBlC,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAMb;UAEX,CAAC,CAAC;QACN;QACA,OAAOV,QAAQ;MACnB;IAEA,KAAK,cAAc;MAAE;QACjB,MAAM;UAAEW,OAAO;UAAEC;QAAK,CAAC,GAAGb,OAAO;QAEjCC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,gBACA,EAACT,KAAK,CAAC+B,OAAO,CAAC,EAAE,GAAG,EACjC1B,SAAS,CAAC0B,OAAO,EAAE,SAAS,CAAC,EAAC,qBAAmB,EAAC,GAAG,EACrD1B,SAAS,CAAC2B,IAAI,EAAE,OAAO,CAAC,EAAC,GAC1B,EAAC3B,SAAS,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;UAAA,GAJ7Cf,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAKb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,eAAe;MAAE;QAClB,MAAM;UAAEW,OAAO;UAAET,MAAM;UAAEU,IAAI;UAAER,KAAK;UAAEC;QAAQ,CAAC,GAAGN,OAAO;QAEzDC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,gBACA,EAACT,KAAK,CAAC+B,OAAO,CAAC,EAAE,GAAG,EACjC1B,SAAS,CAAC0B,OAAO,EAAE,SAAS,CAAC,EAAC,mBAAiB,EAAC,GAAG,EACnD1B,SAAS,CAAC2B,IAAI,EAAE,OAAO,CAAC,EAAC,SAAO,EAAC,GAAG,EACpCA,IAAI,IAAIR,KAAK,GAAG,WAAW,GAAG,QAAQ,EAAC,cAAY,EAAC,GAAG,EACvDnB,SAAS,CAACoB,OAAO,EAAE,SAAS,CAAC,EAAC,WAAS,EAAC,GAAG,EAC3CpB,SAAS,CAACmB,KAAK,EAAE,OAAO,CAAC,EAAC,UAAQ,EAAC,GAAG,EACtCnB,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC;UAAA,GAPtBhC,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAQb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,SAAS;MAAE;QACZA,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,eACD,EAACJ,SAAS,CAACc,OAAO,EAAE,gBAAgB,CAAC,EAAE,GAAG,EAAC,SAE5D;UAAA,GAHQ7B,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAGb;QAEX,CAAC,CAAC;QACF,OAAOV,QAAQ;MACnB;IAEA,KAAK,cAAc;MAAE;QACjB,IAAID,OAAO,CAACc,IAAI,KAAK,SAAS,EAAE,OAAOlB,KAAK;QAE5CK,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,eACD,EAACJ,SAAS,CAACc,OAAO,CAACe,MAAM,EAAE,cAAc,CAAC,EAAE,GAAG,EAAC,OAEjE;UAAA,GAHQ5C,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAGb;QAEX,CAAC,CAAC;QACF,OAAOV,QAAQ;MACnB;IAEA,KAAK,kBAAkB;MAAE;QACrB,MAAM;UAAEE,MAAM;UAAEa,MAAM;UAAEF,IAAI;UAAEG;QAAO,CAAC,GAAGjB,OAAO;QAChDC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAE3B,IAAIkB,IAAI,KAAK,SAAS,EAAE;UACpBb,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,8BACvB,EAACjB,SAAS,CAAC8B,MAAM,EAAE,kBAAkB,CAAC,EAAE,GAAG,EAAC,gBAExD;YAAA,GAJQ7C,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAIb;UAEX,CAAC,CAAC;QACN,CAAC,MAAM,IAAIM,MAAM,KAAKlB,SAAS,EAAE;UAC7B;UACAE,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,WACL,EAACJ,SAAS,CAAC8B,MAAM,EAAE,kBAAkB,CAAC,EAAE,GAAG,EAAC,cACzC,EAAC9B,SAAS,CAAC+B,MAAM,EAAE,IAAI,CAAC,EAAC,GACzC;YAAA,GAHQ9C,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAGb;UAEX,CAAC,CAAC;QACN,CAAC,MAAM;UACHV,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,EACDV,OAAO,CAACgB,MAAM,KAAK,CAAC,gBAChBvC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,cACnC;YAAA,GAFQhC,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAEb,CAAC,gBAEJlC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,QAAM,EAAC,GAAG,EACxCjB,SAAS,CAAC8B,MAAM,EAAE,kBAAkB,CAAC,EAAC,iBAE3C;YAAA,GAJQ7C,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAIb;UAEf,CAAC,CAAC;QACN;QACA,OAAOV,QAAQ;MACnB;IAEA,KAAK,mBAAmB;MAAE;QACtB,MAAM;UAAEE,MAAM;UAAEa,MAAM;UAAEE;QAAK,CAAC,GAAGlB,OAAO;QAExCC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAE3B,IAAIsB,IAAI,KAAK,QAAQ,EAAE;UACnBjB,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,EACDM,MAAM,KAAK,CAAC,gBACRvC,OAAA;cAAAa,QAAA,GAAkB,iBACC,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,GAC9C;YAAA,GAFQhC,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAEb,CAAC,gBAEJlC,OAAA;cAAAa,QAAA,GAAkB,WACL,EAAC,GAAG,EACZJ,SAAS,CAAC8B,MAAM,EAAE,mBAAmB,CAAC,EAAC,iBACjC,EAAC9B,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,GACtC;YAAA,GAJQhC,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAIb;UAEf,CAAC,CAAC;QACN,CAAC,MAAM,IAAIO,IAAI,KAAK,SAAS,EAAE;UAC3BjB,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,iBACnC;YAAA,GAFQhC,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAEb;UAEX,CAAC,CAAC;QACN,CAAC,MAAM;UACHV,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,OAAK,EAAC,GAAG,EACvCjB,SAAS,CAAC8B,MAAM,EAAE,mBAAmB,CAAC,EAAC,mBACpC,EAAC9B,SAAS,CAACgC,IAAI,EAAE,aAAa,CAAC,EAAC,GACxC;YAAA,GAJQ/C,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAIb;UAEX,CAAC,CAAC;QACN;QACA,OAAOV,QAAQ;MACnB;IAEA,KAAK,iBAAiB;MAAE;QACpB,MAAM;UAAEE,MAAM;UAAEgB;QAAW,CAAC,GAAGnB,OAAO;QAEtCC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,SAAO,EAAC,GAAG,EACzCjB,SAAS,CAACiC,UAAU,EAAE,aAAa,CAAC,EAAC,UAC1C;UAAA,GAHQhD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAGb;QAEX,CAAC,CAAC;QACF,OAAOV,QAAQ;MACnB;IAEA,KAAK,cAAc;MAAE;QACjBA,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,qBACK,EAACJ,SAAS,CAACc,OAAO,EAAE,MAAM,CAAC,EAAC,GACnD;UAAA,GAFQ7B,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAEb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,gBAAgB;MAAE;QACnB,MAAM;UAAEmB,IAAI;UAAEC;QAAY,CAAC,GAAGrB,OAAO,CAACsB,UAAU;QAEhDrB,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,MACV,EAAC+B,WAAW,EAAC,GAAC,EAACnC,SAAS,CAACkC,IAAI,EAAE,YAAY,CAAC;UAAA,GAD5CjD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAEb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,wBAAwB;MAAE;QAC3B,MAAM;UAAEqB,UAAU;UAAEnB;QAAO,CAAC,GAAGH,OAAO;QACtC,MAAM;UAAEoB,IAAI;UAAEC;QAAY,CAAC,GAAGC,UAAU;QAExCrB,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAE3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,GAAC,EAACkB,WAAW,EAAE,GAAG,EAChDnC,SAAS,CAACkC,IAAI,EAAE,YAAY,CAAC;UAAA,GAF1BjD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAGb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,YAAY;MAAE;QACf,MAAM;UAAEmB;QAAK,CAAC,GAAGpB,OAAO,CAACsB,UAAU;QAEnCrB,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,WACL,EAACJ,SAAS,CAACkC,IAAI,EAAE,YAAY,CAAC;UAAA,GADnCjD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAEb;QAEX,CAAC,CAAC;QACF,OAAOV,QAAQ;MACnB;IAEA,KAAK,oBAAoB;MAAE;QACvB,MAAM;UAAEE,MAAM;UAAEoB;QAAM,CAAC,GAAGvB,OAAO;QAEjCC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,OAAK,EAAC,GAAG,EACvCjB,SAAS,CAACqC,KAAK,CAACH,IAAI,EAAE,YAAY,CAAC,EAAC,GACzC;UAAA,GAHQjD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAGb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,eAAe;MAAE;QAClB,MAAM;UAAEgB;QAAO,CAAC,GAAGjB,OAAO;QAC1BC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAE3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,WAAS,EAACJ,SAAS,CAAC+B,MAAM,EAAE,IAAI,CAAC,EAAC,GAAC;UAAA,GAA7C9C,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAAwC;QAEhE,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,WAAW;MAAE;QACd,MAAM;UAAEiB,IAAI;UAAEM,EAAE;UAAErB,MAAM;UAAEsB;QAAS,CAAC,GAAGzB,OAAO;QAE9CC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAE3B,IAAIsB,IAAI,KAAKO,QAAQ,IAAIP,IAAI,KAAKM,EAAE,EAAE;UAClCvB,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,gBAAc,EAAC,GAAG,EAChDjB,SAAS,CAACgC,IAAI,EAAE,IAAI,CAAC,EAAC,GAC3B;YAAA,GAHQ/C,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAGb;UAEX,CAAC,CAAC;QACN,CAAC,MAAM;UACHV,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,MACV,EAACJ,SAAS,CAACiB,MAAM,EAAE,MAAM,CAAC,EAAC,MAAI,EAAC,GAAG,EACtCjB,SAAS,CAACsC,EAAE,EAAE,IAAI,CAAC,EAAC,GACzB;YAAA,GAHQrD,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAGb;UAEX,CAAC,CAAC;QACN;QAEA,OAAOV,QAAQ;MACnB;IAEA,KAAK,UAAU;MAAE;QACb,MAAM;UAAEmB;QAAK,CAAC,GAAGpB,OAAO;QAExBC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,sBACM,EAACJ,SAAS,CAACkC,IAAI,EAAE,UAAU,CAAC;UAAA,GAD5CjD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAEb;QAEX,CAAC,CAAC;QACF,OAAOV,QAAQ;MACnB;IAEA,KAAK,SAAS;MAAE;QACZA,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,aACH,EAACJ,SAAS,CAACc,OAAO,EAAE,YAAY,CAAC,EAAE,GAAG,EAAC,aAEtD;UAAA,GAHQ7B,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAGb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,UAAU;MAAE;QACbA,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,aACH,EAACJ,SAAS,CAACc,OAAO,EAAE,MAAM,CAAC,EAAC,QAC3C;UAAA,GAFQ7B,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAEb;QAEX,CAAC,CAAC;QAEF,OAAOV,QAAQ;MACnB;IAEA,KAAK,UAAU;MAAE;QACb,MAAM;UAAEyB,KAAK;UAAEC,EAAE;UAAEC;QAAK,CAAC,GAAG5B,OAAO;QAEnCC,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;QAC3BK,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;UAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;UACbuC,KAAK,eACDjC,OAAA;YAAAa,QAAA,GAAkB,oBACI,EAACJ,SAAS,CAACwC,KAAK,EAAE,OAAO,CAAC,EAAC,UAAQ,EAAC,GAAG,EACxDxC,SAAS,CAACyC,EAAE,EAAE,aAAa,CAAC,EAAC,aAAW,EAAC,GAAG,EAC5CzC,SAAS,CAAC0C,IAAI,EAAE,WAAW,CAAC,EAAC,QAClC;UAAA,GAJQzD,MAAM,CAAC,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAiB,KAIb;QAEX,CAAC,CAAC;QAEF,IAAIvC,wBAAwB,CAACsD,KAAK,CAAC,EAAE;UACjCzB,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,YACJ,EAAC,GAAG,EACbJ,SAAS,CAACb,uBAAuB,EAAE,OAAO,CAAC,EAAE,GAAG,EAAC,iBAEtD;YAAA,GAJQF,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAIb;UAEX,CAAC,CAAC;QACN;QAEA,MAAMkB,aAAa,GAAGtD,MAAM,CACvBuD,MAAM,CAACP,KAAK,IAAIA,KAAK,CAACQ,WAAW,KAAKL,KAAK,CAAC,CAC5CM,GAAG,CAAC,CAAC;QAEV,IAAIH,aAAa,EAAE;UACf5B,QAAQ,CAACtB,OAAO,CAAC6B,IAAI,CAAC;YAClBC,GAAG,EAAEtC,MAAM,CAAC,CAAC;YACbuC,KAAK,eACDjC,OAAA;cAAAa,QAAA,GAAkB,kBACE,EAAC,GAAG,EACnBJ,SAAS,CAAC2C,aAAa,CAACT,IAAI,EAAE,OAAO,CAAC,EAAC,SAC5C;YAAA,GAHQjD,MAAM,CAAC,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAGb;UAEX,CAAC,CAAC;QACN;QAEA,OAAOV,QAAQ;MACnB;IAEA,KAAK,uBAAuB;MACxBA,QAAQ,GAAG/B,SAAS,CAAC0B,KAAK,CAAC;MAC3BK,QAAQ,CAACrB,MAAM,GAAGoB,OAAO;MACzB,OAAOC,QAAQ;IAEnB,KAAK,mBAAmB;IACxB,KAAK,WAAW;MAAE;QACd,IAAI,EAAED,OAAO,IAAIA,OAAO,CAACiC,OAAO,CAAC,EAAE,OAAOvD,YAAY;QAEtDuB,QAAQ,GAAG/B,SAAS,CAAC8B,OAAO,CAACiC,OAAO,CAAC;QACrChC,QAAQ,CAACtB,OAAO,GAAGsB,QAAQ,CAACtB,OAAO,CAACuD,GAAG,CAACC,IAAA;UAAA,IAAC;YAAE1B,GAAG;YAAEC;UAAM,CAAC,GAAAyB,IAAA;UAAA,OAAM;YACzD1B,GAAG;YACHC,KAAK,eACDjC,OAAA;cAAAa,QAAA,EACKoB,KAAK,CAAC0B,KAAK,CAAC9C,QAAQ,CAAC4C,GAAG,CAACG,KAAK,IAAI;gBAC/B,IAAIA,KAAK,CAACD,KAAK,EAAE;kBACb,OAAOlD,SAAS,CACZmD,KAAK,CAACD,KAAK,CAAC9C,QAAQ,EACpB+C,KAAK,CAACD,KAAK,CAAC/C,SAChB,CAAC;gBACL,CAAC,MAAM;kBACH,OAAOgD,KAAK;gBAChB;cACJ,CAAC;YAAC,GAVE3B,KAAK,CAACD,GAAG;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAiB,KAWd;UAEX,CAAC;QAAA,CAAC,CAAC;QACH,OAAA2B,aAAA,CAAAA,aAAA,KAAY5D,YAAY,GAAKuB,QAAQ;MACzC;IAEA,KAAK,OAAO;MACR,OAAAqC,aAAA,KAAY5D,YAAY;IAE5B;MACI,OAAOkB,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}