{"ast":null,"code":"import { SPRITE_SIZE } from '../../../config/constants';\n\n/**\n * The monster can't move, so all this really does is reveal the monster\n * if they're in view, hide them if they're not, and then reverts their AI\n * if they're unfrozen.\n *\n * @param {*} sightBox The players FOV\n * @param {*} currentMap The map the player is in\n * @param {*} monster The monster we're moving\n */\nexport default function frozen(sightBox, currentMap, monster) {\n  return dispatch => {\n    const {\n      id,\n      position,\n      direction\n    } = monster;\n    const monsterPosition = position.map(pos => pos / SPRITE_SIZE);\n    let monsterVisible = false;\n    // look through each current sight box tile\n    sightBox.forEach(tile => {\n      // if the monster is in sight\n      if (JSON.stringify(tile) === JSON.stringify(monsterPosition)) {\n        monsterVisible = true;\n      }\n    });\n    if (monsterVisible) {\n      dispatch({\n        type: 'REVEAL_MONSTER',\n        payload: {\n          id,\n          map: currentMap\n        }\n      });\n    } else {\n      // monster is too far away from the player\n      dispatch({\n        type: 'HIDE_MONSTER',\n        payload: {\n          id,\n          map: currentMap\n        }\n      });\n    }\n    dispatch({\n      type: 'MOVE_MONSTER',\n      payload: {\n        map: currentMap,\n        id,\n        position,\n        direction\n      }\n    });\n    if (monster.aiTurns === 0) {\n      dispatch({\n        type: 'CHANGE_AI',\n        payload: {\n          map: currentMap,\n          ai: monster.originalAI,\n          id,\n          from: 'frozen',\n          turns: 0,\n          entity: monster.type,\n          original: monster.originalAI\n        }\n      });\n    }\n  };\n}","map":{"version":3,"names":["SPRITE_SIZE","frozen","sightBox","currentMap","monster","dispatch","id","position","direction","monsterPosition","map","pos","monsterVisible","forEach","tile","JSON","stringify","type","payload","aiTurns","ai","originalAI","from","turns","entity","original"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/actions/frozen-ai.jsx"],"sourcesContent":["import { SPRITE_SIZE } from '../../../config/constants';\n\n/**\n * The monster can't move, so all this really does is reveal the monster\n * if they're in view, hide them if they're not, and then reverts their AI\n * if they're unfrozen.\n *\n * @param {*} sightBox The players FOV\n * @param {*} currentMap The map the player is in\n * @param {*} monster The monster we're moving\n */\nexport default function frozen(sightBox, currentMap, monster) {\n  return (dispatch) => {\n    const { id, position, direction } = monster;\n\n    const monsterPosition = position.map((pos) => pos / SPRITE_SIZE);\n\n    let monsterVisible = false;\n    // look through each current sight box tile\n    sightBox.forEach((tile) => {\n      // if the monster is in sight\n      if (JSON.stringify(tile) === JSON.stringify(monsterPosition)) {\n        monsterVisible = true;\n      }\n    });\n\n    if (monsterVisible) {\n      dispatch({\n        type: 'REVEAL_MONSTER',\n        payload: { id, map: currentMap },\n      });\n    } else {\n      // monster is too far away from the player\n      dispatch({\n        type: 'HIDE_MONSTER',\n        payload: { id, map: currentMap },\n      });\n    }\n\n    dispatch({\n      type: 'MOVE_MONSTER',\n      payload: {\n        map: currentMap,\n        id,\n        position,\n        direction,\n      },\n    });\n\n    if (monster.aiTurns === 0) {\n      dispatch({\n        type: 'CHANGE_AI',\n        payload: {\n          map: currentMap,\n          ai: monster.originalAI,\n          id,\n          from: 'frozen',\n          turns: 0,\n          entity: monster.type,\n          original: monster.originalAI,\n        },\n      });\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,2BAA2B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC5D,OAAQC,QAAQ,IAAK;IACnB,MAAM;MAAEC,EAAE;MAAEC,QAAQ;MAAEC;IAAU,CAAC,GAAGJ,OAAO;IAE3C,MAAMK,eAAe,GAAGF,QAAQ,CAACG,GAAG,CAAEC,GAAG,IAAKA,GAAG,GAAGX,WAAW,CAAC;IAEhE,IAAIY,cAAc,GAAG,KAAK;IAC1B;IACAV,QAAQ,CAACW,OAAO,CAAEC,IAAI,IAAK;MACzB;MACA,IAAIC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,KAAKC,IAAI,CAACC,SAAS,CAACP,eAAe,CAAC,EAAE;QAC5DG,cAAc,GAAG,IAAI;MACvB;IACF,CAAC,CAAC;IAEF,IAAIA,cAAc,EAAE;MAClBP,QAAQ,CAAC;QACPY,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE;UAAEZ,EAAE;UAAEI,GAAG,EAAEP;QAAW;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAE,QAAQ,CAAC;QACPY,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAE;UAAEZ,EAAE;UAAEI,GAAG,EAAEP;QAAW;MACjC,CAAC,CAAC;IACJ;IAEAE,QAAQ,CAAC;MACPY,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAE;QACPR,GAAG,EAAEP,UAAU;QACfG,EAAE;QACFC,QAAQ;QACRC;MACF;IACF,CAAC,CAAC;IAEF,IAAIJ,OAAO,CAACe,OAAO,KAAK,CAAC,EAAE;MACzBd,QAAQ,CAAC;QACPY,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE;UACPR,GAAG,EAAEP,UAAU;UACfiB,EAAE,EAAEhB,OAAO,CAACiB,UAAU;UACtBf,EAAE;UACFgB,IAAI,EAAE,QAAQ;UACdC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAEpB,OAAO,CAACa,IAAI;UACpBQ,QAAQ,EAAErB,OAAO,CAACiB;QACpB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}