{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Hammer from 'hammerjs';\nimport _debounce from 'lodash.debounce';\nimport attackMonster from './actions/attack-monster';\nimport movePlayer from './actions/move-player';\nimport castSpell from './actions/cast-spell';\nimport isGamePaused from '../dialog-manager/actions/is-game-paused';\nimport toggleInventory from '../dialog-manager/actions/toggle-inventory';\nimport abilityScoreDialog from '../dialog-manager/actions/ability-score-dialog';\nimport toggleJournal from '../dialog-manager/actions/toggle-journal';\nimport toggleSettings from '../dialog-manager/actions/toggle-settings';\nimport toggleSpellbookDialog from '../dialog-manager/actions/toggle-spellbook-dialog';\nimport toggleTutorial from '../dialog-manager/actions/toggle-tutorial';\nimport { ANIMATION_SPEED, W_KEY, S_KEY, A_KEY, D_KEY, U_KEY, H_KEY, I_KEY, J_KEY, C_KEY, B_KEY, UP_KEY, DOWN_KEY, LEFT_KEY, RIGHT_KEY, SPACE_KEY, ESC_KEY } from '../../config/constants';\nconst ANIMATION_WITH_PADDING = ANIMATION_SPEED * 1.25;\nlet intervalId = null;\nconst Controls = _ref => {\n  _s();\n  let {\n    isGamePaused,\n    attackMonster,\n    castSpell,\n    movePlayer,\n    toggleInventory,\n    toggleJournal,\n    abilityScoreDialog,\n    toggleSettings,\n    toggleSpellbookDialog,\n    toggleTutorial\n  } = _ref;\n  const _handleKeyDown = _debounce(event => {\n    // if the game is not paused by dialogs\n    if (!isGamePaused()) handleKeyDown(event);\n  }, ANIMATION_WITH_PADDING, {\n    maxWait: ANIMATION_WITH_PADDING,\n    leading: true,\n    trailing: false\n  });\n  const _swipe = _debounce(_ref2 => {\n    let {\n      direction,\n      offsetDirection\n    } = _ref2;\n    // return if the game is paused by dialogs\n    if (isGamePaused()) return;\n    // if we get a bad pan, use the best guess\n    if (direction === 1) direction = offsetDirection;\n    switch (direction) {\n      case 8:\n        movePlayer('NORTH');\n        break;\n      case 16:\n        movePlayer('SOUTH');\n        break;\n      case 2:\n        movePlayer('WEST');\n        break;\n      case 4:\n        movePlayer('EAST');\n        break;\n      default:\n    }\n  }, ANIMATION_WITH_PADDING, {\n    maxWait: ANIMATION_WITH_PADDING,\n    leading: true,\n    trailing: false\n  });\n  const _swipeHold = _debounce(_ref3 => {\n    let {\n      direction,\n      offsetDirection\n    } = _ref3;\n    // return if the game is paused by dialogs or in settings mode\n    if (isGamePaused()) return;\n    // if we get a bad pan, use the best guess\n    if (direction === 1) direction = offsetDirection;\n    intervalId = setInterval(() => {\n      switch (direction) {\n        case 8:\n          movePlayer('NORTH');\n          break;\n        case 16:\n          movePlayer('SOUTH');\n          break;\n        case 2:\n          movePlayer('WEST');\n          break;\n        case 4:\n          movePlayer('EAST');\n          break;\n        default:\n      }\n    }, ANIMATION_WITH_PADDING);\n  }, ANIMATION_WITH_PADDING, {\n    maxWait: ANIMATION_WITH_PADDING,\n    leading: true,\n    trailing: false\n  });\n  const _tap = _debounce(() => {\n    // if the game is not paused by dialogs\n    if (!isGamePaused()) attackMonster();\n  }, ANIMATION_WITH_PADDING, {\n    maxWait: ANIMATION_WITH_PADDING,\n    leading: true,\n    trailing: false\n  });\n  const _clearInterval = () => {\n    clearInterval(intervalId);\n  };\n  useEffect(() => {\n    // enable keyboard for player controls\n    window.addEventListener('keydown', _handleKeyDown);\n    // enable touch for player controls\n    const hammertime = new Hammer(document.getElementById('window'));\n    // settings for touch controls\n    hammertime.get('pan').set({\n      direction: Hammer.DIRECTION_ALL\n    });\n    hammertime.get('swipe').set({\n      direction: Hammer.DIRECTION_ALL\n    });\n    hammertime.get('tap').set({\n      taps: 2\n    });\n    // bind touch control functions\n    hammertime.on('swipe', _swipe);\n    hammertime.on('panend', _clearInterval);\n    hammertime.on('panstart', _swipeHold);\n    hammertime.on('tap', _tap);\n    // make sure to unbind all listeners on unmount\n    return () => {\n      window.removeEventListener('keydown', _handleKeyDown);\n      hammertime.off('swipe', _swipe);\n      hammertime.off('panend', _clearInterval);\n      hammertime.off('panstart', _swipeHold);\n      hammertime.off('tap', _tap);\n    };\n  }, []);\n  function handleKeyDown(event) {\n    event.preventDefault();\n    // move with 'WASD' or Arrow keys,\n    // attack with 'SPACE',\n    // open inventory with 'I',\n    // open ability dialog with 'U'\n    switch (event.keyCode) {\n      case LEFT_KEY:\n      case A_KEY:\n        return movePlayer('WEST');\n      case UP_KEY:\n      case W_KEY:\n        return movePlayer('NORTH');\n      case RIGHT_KEY:\n      case D_KEY:\n        return movePlayer('EAST');\n      case DOWN_KEY:\n      case S_KEY:\n        return movePlayer('SOUTH');\n      case SPACE_KEY:\n        return attackMonster();\n      case C_KEY:\n        return castSpell();\n      case I_KEY:\n        return toggleInventory();\n      case J_KEY:\n        return toggleJournal();\n      case U_KEY:\n        return abilityScoreDialog(false);\n      case ESC_KEY:\n        return toggleSettings();\n      case B_KEY:\n        return toggleSpellbookDialog();\n      case H_KEY:\n        return toggleTutorial();\n      default:\n    }\n  }\n  return null;\n};\n_s(Controls, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Controls;\nconst actions = {\n  attackMonster,\n  castSpell,\n  movePlayer,\n  isGamePaused,\n  toggleInventory,\n  toggleJournal,\n  abilityScoreDialog,\n  toggleSettings,\n  toggleSpellbookDialog,\n  toggleTutorial\n};\nexport default connect(null, actions)(Controls);\nvar _c;\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"names":["useEffect","connect","Hammer","_debounce","attackMonster","movePlayer","castSpell","isGamePaused","toggleInventory","abilityScoreDialog","toggleJournal","toggleSettings","toggleSpellbookDialog","toggleTutorial","ANIMATION_SPEED","W_KEY","S_KEY","A_KEY","D_KEY","U_KEY","H_KEY","I_KEY","J_KEY","C_KEY","B_KEY","UP_KEY","DOWN_KEY","LEFT_KEY","RIGHT_KEY","SPACE_KEY","ESC_KEY","ANIMATION_WITH_PADDING","intervalId","Controls","_ref","_s","_handleKeyDown","event","handleKeyDown","maxWait","leading","trailing","_swipe","_ref2","direction","offsetDirection","_swipeHold","_ref3","setInterval","_tap","_clearInterval","clearInterval","window","addEventListener","hammertime","document","getElementById","get","set","DIRECTION_ALL","taps","on","removeEventListener","off","preventDefault","keyCode","_c","actions","$RefreshReg$"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/player/controls.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Hammer from 'hammerjs';\nimport _debounce from 'lodash.debounce';\n\nimport attackMonster from './actions/attack-monster';\nimport movePlayer from './actions/move-player';\nimport castSpell from './actions/cast-spell';\nimport isGamePaused from '../dialog-manager/actions/is-game-paused';\nimport toggleInventory from '../dialog-manager/actions/toggle-inventory';\nimport abilityScoreDialog from '../dialog-manager/actions/ability-score-dialog';\nimport toggleJournal from '../dialog-manager/actions/toggle-journal';\nimport toggleSettings from '../dialog-manager/actions/toggle-settings';\nimport toggleSpellbookDialog from '../dialog-manager/actions/toggle-spellbook-dialog';\nimport toggleTutorial from '../dialog-manager/actions/toggle-tutorial';\n\nimport {\n  ANIMATION_SPEED,\n  W_KEY,\n  S_KEY,\n  A_KEY,\n  D_KEY,\n  U_KEY,\n  H_KEY,\n  I_KEY,\n  J_KEY,\n  C_KEY,\n  B_KEY,\n  UP_KEY,\n  DOWN_KEY,\n  LEFT_KEY,\n  RIGHT_KEY,\n  SPACE_KEY,\n  ESC_KEY,\n} from '../../config/constants';\n\nconst ANIMATION_WITH_PADDING = ANIMATION_SPEED * 1.25;\n\nlet intervalId = null;\n\nconst Controls = ({\n  isGamePaused,\n  attackMonster,\n  castSpell,\n  movePlayer,\n  toggleInventory,\n  toggleJournal,\n  abilityScoreDialog,\n  toggleSettings,\n  toggleSpellbookDialog,\n  toggleTutorial,\n}) => {\n  const _handleKeyDown = _debounce(\n    (event) => {\n      // if the game is not paused by dialogs\n      if (!isGamePaused()) handleKeyDown(event);\n    },\n    ANIMATION_WITH_PADDING,\n    { maxWait: ANIMATION_WITH_PADDING, leading: true, trailing: false }\n  );\n\n  const _swipe = _debounce(\n    ({ direction, offsetDirection }) => {\n      // return if the game is paused by dialogs\n      if (isGamePaused()) return;\n      // if we get a bad pan, use the best guess\n      if (direction === 1) direction = offsetDirection;\n\n      switch (direction) {\n        case 8:\n          movePlayer('NORTH');\n          break;\n        case 16:\n          movePlayer('SOUTH');\n          break;\n        case 2:\n          movePlayer('WEST');\n          break;\n        case 4:\n          movePlayer('EAST');\n          break;\n        default:\n      }\n    },\n    ANIMATION_WITH_PADDING,\n    { maxWait: ANIMATION_WITH_PADDING, leading: true, trailing: false }\n  );\n\n  const _swipeHold = _debounce(\n    ({ direction, offsetDirection }) => {\n      // return if the game is paused by dialogs or in settings mode\n      if (isGamePaused()) return;\n      // if we get a bad pan, use the best guess\n      if (direction === 1) direction = offsetDirection;\n\n      intervalId = setInterval(() => {\n        switch (direction) {\n          case 8:\n            movePlayer('NORTH');\n            break;\n          case 16:\n            movePlayer('SOUTH');\n            break;\n          case 2:\n            movePlayer('WEST');\n            break;\n          case 4:\n            movePlayer('EAST');\n            break;\n          default:\n        }\n      }, ANIMATION_WITH_PADDING);\n    },\n    ANIMATION_WITH_PADDING,\n    { maxWait: ANIMATION_WITH_PADDING, leading: true, trailing: false }\n  );\n\n  const _tap = _debounce(\n    () => {\n      // if the game is not paused by dialogs\n      if (!isGamePaused()) attackMonster();\n    },\n    ANIMATION_WITH_PADDING,\n    { maxWait: ANIMATION_WITH_PADDING, leading: true, trailing: false }\n  );\n\n  const _clearInterval = () => {\n    clearInterval(intervalId);\n  };\n\n  useEffect(() => {\n    // enable keyboard for player controls\n    window.addEventListener('keydown', _handleKeyDown);\n    // enable touch for player controls\n    const hammertime = new Hammer(document.getElementById('window'));\n    // settings for touch controls\n    hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });\n    hammertime.get('swipe').set({ direction: Hammer.DIRECTION_ALL });\n    hammertime.get('tap').set({ taps: 2 });\n    // bind touch control functions\n    hammertime.on('swipe', _swipe);\n    hammertime.on('panend', _clearInterval);\n    hammertime.on('panstart', _swipeHold);\n    hammertime.on('tap', _tap);\n    // make sure to unbind all listeners on unmount\n    return () => {\n      window.removeEventListener('keydown', _handleKeyDown);\n      hammertime.off('swipe', _swipe);\n      hammertime.off('panend', _clearInterval);\n      hammertime.off('panstart', _swipeHold);\n      hammertime.off('tap', _tap);\n    };\n  }, []);\n\n  function handleKeyDown(event) {\n    event.preventDefault();\n    // move with 'WASD' or Arrow keys,\n    // attack with 'SPACE',\n    // open inventory with 'I',\n    // open ability dialog with 'U'\n    switch (event.keyCode) {\n      case LEFT_KEY:\n      case A_KEY:\n        return movePlayer('WEST');\n      case UP_KEY:\n      case W_KEY:\n        return movePlayer('NORTH');\n      case RIGHT_KEY:\n      case D_KEY:\n        return movePlayer('EAST');\n      case DOWN_KEY:\n      case S_KEY:\n        return movePlayer('SOUTH');\n      case SPACE_KEY:\n        return attackMonster();\n      case C_KEY:\n        return castSpell();\n      case I_KEY:\n        return toggleInventory();\n      case J_KEY:\n        return toggleJournal();\n      case U_KEY:\n        return abilityScoreDialog(false);\n      case ESC_KEY:\n        return toggleSettings();\n      case B_KEY:\n        return toggleSpellbookDialog();\n      case H_KEY:\n        return toggleTutorial();\n      default:\n    }\n  }\n\n  return null;\n};\n\nconst actions = {\n  attackMonster,\n  castSpell,\n  movePlayer,\n  isGamePaused,\n  toggleInventory,\n  toggleJournal,\n  abilityScoreDialog,\n  toggleSettings,\n  toggleSpellbookDialog,\n  toggleTutorial,\n};\n\nexport default connect(null, actions)(Controls);\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,YAAY,MAAM,0CAA0C;AACnE,OAAOC,eAAe,MAAM,4CAA4C;AACxE,OAAOC,kBAAkB,MAAM,gDAAgD;AAC/E,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,cAAc,MAAM,2CAA2C;AACtE,OAAOC,qBAAqB,MAAM,mDAAmD;AACrF,OAAOC,cAAc,MAAM,2CAA2C;AAEtE,SACEC,eAAe,EACfC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,SAAS,EACTC,OAAO,QACF,wBAAwB;AAE/B,MAAMC,sBAAsB,GAAGjB,eAAe,GAAG,IAAI;AAErD,IAAIkB,UAAU,GAAG,IAAI;AAErB,MAAMC,QAAQ,GAAGC,IAAA,IAWX;EAAAC,EAAA;EAAA,IAXY;IAChB5B,YAAY;IACZH,aAAa;IACbE,SAAS;IACTD,UAAU;IACVG,eAAe;IACfE,aAAa;IACbD,kBAAkB;IAClBE,cAAc;IACdC,qBAAqB;IACrBC;EACF,CAAC,GAAAqB,IAAA;EACC,MAAME,cAAc,GAAGjC,SAAS,CAC7BkC,KAAK,IAAK;IACT;IACA,IAAI,CAAC9B,YAAY,CAAC,CAAC,EAAE+B,aAAa,CAACD,KAAK,CAAC;EAC3C,CAAC,EACDN,sBAAsB,EACtB;IAAEQ,OAAO,EAAER,sBAAsB;IAAES,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAM,CACpE,CAAC;EAED,MAAMC,MAAM,GAAGvC,SAAS,CACtBwC,KAAA,IAAoC;IAAA,IAAnC;MAAEC,SAAS;MAAEC;IAAgB,CAAC,GAAAF,KAAA;IAC7B;IACA,IAAIpC,YAAY,CAAC,CAAC,EAAE;IACpB;IACA,IAAIqC,SAAS,KAAK,CAAC,EAAEA,SAAS,GAAGC,eAAe;IAEhD,QAAQD,SAAS;MACf,KAAK,CAAC;QACJvC,UAAU,CAAC,OAAO,CAAC;QACnB;MACF,KAAK,EAAE;QACLA,UAAU,CAAC,OAAO,CAAC;QACnB;MACF,KAAK,CAAC;QACJA,UAAU,CAAC,MAAM,CAAC;QAClB;MACF,KAAK,CAAC;QACJA,UAAU,CAAC,MAAM,CAAC;QAClB;MACF;IACF;EACF,CAAC,EACD0B,sBAAsB,EACtB;IAAEQ,OAAO,EAAER,sBAAsB;IAAES,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAM,CACpE,CAAC;EAED,MAAMK,UAAU,GAAG3C,SAAS,CAC1B4C,KAAA,IAAoC;IAAA,IAAnC;MAAEH,SAAS;MAAEC;IAAgB,CAAC,GAAAE,KAAA;IAC7B;IACA,IAAIxC,YAAY,CAAC,CAAC,EAAE;IACpB;IACA,IAAIqC,SAAS,KAAK,CAAC,EAAEA,SAAS,GAAGC,eAAe;IAEhDb,UAAU,GAAGgB,WAAW,CAAC,MAAM;MAC7B,QAAQJ,SAAS;QACf,KAAK,CAAC;UACJvC,UAAU,CAAC,OAAO,CAAC;UACnB;QACF,KAAK,EAAE;UACLA,UAAU,CAAC,OAAO,CAAC;UACnB;QACF,KAAK,CAAC;UACJA,UAAU,CAAC,MAAM,CAAC;UAClB;QACF,KAAK,CAAC;UACJA,UAAU,CAAC,MAAM,CAAC;UAClB;QACF;MACF;IACF,CAAC,EAAE0B,sBAAsB,CAAC;EAC5B,CAAC,EACDA,sBAAsB,EACtB;IAAEQ,OAAO,EAAER,sBAAsB;IAAES,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAM,CACpE,CAAC;EAED,MAAMQ,IAAI,GAAG9C,SAAS,CACpB,MAAM;IACJ;IACA,IAAI,CAACI,YAAY,CAAC,CAAC,EAAEH,aAAa,CAAC,CAAC;EACtC,CAAC,EACD2B,sBAAsB,EACtB;IAAEQ,OAAO,EAAER,sBAAsB;IAAES,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAM,CACpE,CAAC;EAED,MAAMS,cAAc,GAAGA,CAAA,KAAM;IAC3BC,aAAa,CAACnB,UAAU,CAAC;EAC3B,CAAC;EAEDhC,SAAS,CAAC,MAAM;IACd;IACAoD,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEjB,cAAc,CAAC;IAClD;IACA,MAAMkB,UAAU,GAAG,IAAIpD,MAAM,CAACqD,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAChE;IACAF,UAAU,CAACG,GAAG,CAAC,KAAK,CAAC,CAACC,GAAG,CAAC;MAAEd,SAAS,EAAE1C,MAAM,CAACyD;IAAc,CAAC,CAAC;IAC9DL,UAAU,CAACG,GAAG,CAAC,OAAO,CAAC,CAACC,GAAG,CAAC;MAAEd,SAAS,EAAE1C,MAAM,CAACyD;IAAc,CAAC,CAAC;IAChEL,UAAU,CAACG,GAAG,CAAC,KAAK,CAAC,CAACC,GAAG,CAAC;MAAEE,IAAI,EAAE;IAAE,CAAC,CAAC;IACtC;IACAN,UAAU,CAACO,EAAE,CAAC,OAAO,EAAEnB,MAAM,CAAC;IAC9BY,UAAU,CAACO,EAAE,CAAC,QAAQ,EAAEX,cAAc,CAAC;IACvCI,UAAU,CAACO,EAAE,CAAC,UAAU,EAAEf,UAAU,CAAC;IACrCQ,UAAU,CAACO,EAAE,CAAC,KAAK,EAAEZ,IAAI,CAAC;IAC1B;IACA,OAAO,MAAM;MACXG,MAAM,CAACU,mBAAmB,CAAC,SAAS,EAAE1B,cAAc,CAAC;MACrDkB,UAAU,CAACS,GAAG,CAAC,OAAO,EAAErB,MAAM,CAAC;MAC/BY,UAAU,CAACS,GAAG,CAAC,QAAQ,EAAEb,cAAc,CAAC;MACxCI,UAAU,CAACS,GAAG,CAAC,UAAU,EAAEjB,UAAU,CAAC;MACtCQ,UAAU,CAACS,GAAG,CAAC,KAAK,EAAEd,IAAI,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,SAASX,aAAaA,CAACD,KAAK,EAAE;IAC5BA,KAAK,CAAC2B,cAAc,CAAC,CAAC;IACtB;IACA;IACA;IACA;IACA,QAAQ3B,KAAK,CAAC4B,OAAO;MACnB,KAAKtC,QAAQ;MACb,KAAKV,KAAK;QACR,OAAOZ,UAAU,CAAC,MAAM,CAAC;MAC3B,KAAKoB,MAAM;MACX,KAAKV,KAAK;QACR,OAAOV,UAAU,CAAC,OAAO,CAAC;MAC5B,KAAKuB,SAAS;MACd,KAAKV,KAAK;QACR,OAAOb,UAAU,CAAC,MAAM,CAAC;MAC3B,KAAKqB,QAAQ;MACb,KAAKV,KAAK;QACR,OAAOX,UAAU,CAAC,OAAO,CAAC;MAC5B,KAAKwB,SAAS;QACZ,OAAOzB,aAAa,CAAC,CAAC;MACxB,KAAKmB,KAAK;QACR,OAAOjB,SAAS,CAAC,CAAC;MACpB,KAAKe,KAAK;QACR,OAAOb,eAAe,CAAC,CAAC;MAC1B,KAAKc,KAAK;QACR,OAAOZ,aAAa,CAAC,CAAC;MACxB,KAAKS,KAAK;QACR,OAAOV,kBAAkB,CAAC,KAAK,CAAC;MAClC,KAAKqB,OAAO;QACV,OAAOnB,cAAc,CAAC,CAAC;MACzB,KAAKa,KAAK;QACR,OAAOZ,qBAAqB,CAAC,CAAC;MAChC,KAAKQ,KAAK;QACR,OAAOP,cAAc,CAAC,CAAC;MACzB;IACF;EACF;EAEA,OAAO,IAAI;AACb,CAAC;AAACsB,EAAA,CA1JIF,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AA4Jd,MAAMkC,OAAO,GAAG;EACd/D,aAAa;EACbE,SAAS;EACTD,UAAU;EACVE,YAAY;EACZC,eAAe;EACfE,aAAa;EACbD,kBAAkB;EAClBE,cAAc;EACdC,qBAAqB;EACrBC;AACF,CAAC;AAED,eAAeZ,OAAO,CAAC,IAAI,EAAEkE,OAAO,CAAC,CAAClC,QAAQ,CAAC;AAAC,IAAAiC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}