{"ast":null,"code":"import _objectSpread from \"C:/Users/devis/Downloads/react-rpg.com-master/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _cloneDeep from 'lodash.clonedeep';\nimport { SPRITE_SIZE } from '../../config/constants';\nimport monsterData from '../../data/monsters';\nimport uuidv4 from '../../utils/uuid-v4.js';\nconst initialState = {\n  components: {}\n};\nconst monstersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n  switch (type) {\n    case 'MOVE_MONSTER':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].position = payload.position;\n      newState.components[payload.map][payload.id].aiTurns -= 1;\n      newState.components[payload.map][payload.id].direction = payload.direction;\n      return newState;\n    case 'DAMAGE_TO_MONSTER':\n      newState = _cloneDeep(state);\n      // subtract the damage from monster hp\n      newState.components[payload.map][payload.id].hp -= payload.damage;\n      // if monster has 0 or less hp, kill it\n      if (newState.components[payload.map][payload.id].hp <= 0) {\n        delete newState.components[payload.map][payload.id];\n      }\n      return newState;\n    case 'MONSTER_HEAL_HP':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].hp += payload.healAmount;\n      const health = newState.components[payload.map][payload.id].hp;\n      const maxHealth = newState.components[payload.map][payload.id].maxHp;\n      if (health > maxHealth) {\n        newState.components[payload.map][payload.id].hp = maxHealth;\n      }\n      return newState;\n\n    // load a new set of monsters\n    case 'ADD_MONSTERS':\n      newState = _cloneDeep(state);\n      // save monsters by the map\n      if (!newState.components[payload.map]) {\n        newState.components[payload.map] = {};\n        // render monsters\n        payload.monsters.forEach(monster => {\n          // generate a unique id (for tracking purposes)\n          const uuid = uuidv4();\n          // merge the id, monster stats, and position\n          // set the position from tile(x,y) to actual pixel size\n          monster = _objectSpread({\n            id: uuid,\n            position: monster.position.map(value => value * SPRITE_SIZE)\n          }, monsterData[monster.type]);\n          newState.components[payload.map][uuid] = monster;\n        });\n      }\n      return newState;\n    case 'REVEAL_MONSTER':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].visible = true;\n      return newState;\n    case 'HIDE_MONSTER':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].visible = false;\n      return newState;\n    case 'CHANGE_AI':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].ai = payload.ai;\n      newState.components[payload.map][payload.id].aiTurns = payload.turns;\n      return newState;\n    case 'RESET':\n      return initialState;\n    case 'LOAD_DATA':\n      return _objectSpread(_objectSpread({}, initialState), payload.monsters);\n    default:\n      return state;\n  }\n};\nexport default monstersReducer;","map":{"version":3,"names":["_cloneDeep","SPRITE_SIZE","monsterData","uuidv4","initialState","components","monstersReducer","state","arguments","length","undefined","type","payload","newState","map","id","position","aiTurns","direction","hp","damage","healAmount","health","maxHealth","maxHp","monsters","forEach","monster","uuid","_objectSpread","value","visible","ai","turns"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/reducer.jsx"],"sourcesContent":["import _cloneDeep from 'lodash.clonedeep';\n\nimport { SPRITE_SIZE } from '../../config/constants';\nimport monsterData from '../../data/monsters';\nimport uuidv4 from '../../utils/uuid-v4.js';\n\nconst initialState = {\n    components: {},\n};\n\nconst monstersReducer = (state = initialState, { type, payload }) => {\n    let newState;\n\n    switch (type) {\n        case 'MOVE_MONSTER':\n            newState = _cloneDeep(state);\n\n            newState.components[payload.map][payload.id].position =\n                payload.position;\n\n            newState.components[payload.map][payload.id].aiTurns -= 1;\n\n            newState.components[payload.map][payload.id].direction =\n                payload.direction;\n\n            return newState;\n\n        case 'DAMAGE_TO_MONSTER':\n            newState = _cloneDeep(state);\n            // subtract the damage from monster hp\n            newState.components[payload.map][payload.id].hp -= payload.damage;\n            // if monster has 0 or less hp, kill it\n            if (newState.components[payload.map][payload.id].hp <= 0) {\n                delete newState.components[payload.map][payload.id];\n            }\n\n            return newState;\n\n        case 'MONSTER_HEAL_HP':\n            newState = _cloneDeep(state);\n            newState.components[payload.map][payload.id].hp +=\n                payload.healAmount;\n            const health = newState.components[payload.map][payload.id].hp;\n            const maxHealth =\n                newState.components[payload.map][payload.id].maxHp;\n            if (health > maxHealth) {\n                newState.components[payload.map][payload.id].hp = maxHealth;\n            }\n\n            return newState;\n\n        // load a new set of monsters\n        case 'ADD_MONSTERS':\n            newState = _cloneDeep(state);\n            // save monsters by the map\n            if (!newState.components[payload.map]) {\n                newState.components[payload.map] = {};\n                // render monsters\n                payload.monsters.forEach(monster => {\n                    // generate a unique id (for tracking purposes)\n                    const uuid = uuidv4();\n                    // merge the id, monster stats, and position\n                    // set the position from tile(x,y) to actual pixel size\n                    monster = {\n                        id: uuid,\n                        position: monster.position.map(\n                            value => value * SPRITE_SIZE\n                        ),\n                        ...monsterData[monster.type],\n                    };\n                    newState.components[payload.map][uuid] = monster;\n                });\n            }\n\n            return newState;\n\n        case 'REVEAL_MONSTER':\n            newState = _cloneDeep(state);\n\n            newState.components[payload.map][payload.id].visible = true;\n            return newState;\n\n        case 'HIDE_MONSTER':\n            newState = _cloneDeep(state);\n\n            newState.components[payload.map][payload.id].visible = false;\n            return newState;\n\n        case 'CHANGE_AI':\n            newState = _cloneDeep(state);\n\n            newState.components[payload.map][payload.id].ai = payload.ai;\n            newState.components[payload.map][payload.id].aiTurns =\n                payload.turns;\n            return newState;\n\n        case 'RESET':\n            return initialState;\n\n        case 'LOAD_DATA':\n            return { ...initialState, ...payload.monsters };\n\n        default:\n            return state;\n    }\n};\n\nexport default monstersReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}