{"ast":null,"code":"import _objectSpread from \"C:/Users/devis/Downloads/react-rpg.com-master/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\devis\\\\Downloads\\\\react-rpg.com-master\\\\src\\\\features\\\\map\\\\index.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport MapTile from './map-tile';\nimport MapPadding from './map-padding';\nimport { SPRITE_SIZE, MAP_HEIGHT, MAP_WIDTH } from '../../config/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameMap = _ref => {\n  let {\n    map,\n    world\n  } = _ref;\n  const {\n    gameMode,\n    storyMaps,\n    randomMaps,\n    currentMap,\n    floorNum\n  } = world;\n  const mapStyle = {\n    width: MAP_WIDTH,\n    height: MAP_HEIGHT,\n    position: 'relative'\n  };\n  if (!currentMap) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: mapStyle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 27\n  }, this);\n  let wallType = null;\n  if (gameMode === 'story') {\n    map = _objectSpread(_objectSpread({}, map), storyMaps[currentMap]);\n    wallType = map.wallType;\n  } else {\n    map = _objectSpread(_objectSpread({}, map), randomMaps[floorNum - 1]);\n    // Give the player a variety of walls while they traverse endless mode\n    if (floorNum < 30) wallType = 'brick';else if (floorNum < 60) wallType = 'ornate';else if (floorNum < 90) wallType = 'purple';else if (floorNum >= 90) wallType = 'inca-dark';\n  }\n  const tileType = getWallType(map.tiles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: mapStyle,\n    children: [/*#__PURE__*/_jsxDEV(MapPadding, {\n      tileType: tileType,\n      wallType: wallType,\n      tiles: map.paddingTiles,\n      sightBox: map.paddingSightBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), map.tiles.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(MapRow, {\n        tiles: row,\n        wallType: wallType,\n        index: index,\n        sightBox: map.sightBox\n      }, JSON.stringify(row) + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = GameMap;\nconst MapRow = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    style: {\n      height: SPRITE_SIZE\n    },\n    children: props.tiles.map((tile, index) => {\n      return /*#__PURE__*/_jsxDEV(MapTile, {\n        tile: tile,\n        wallType: props.wallType,\n        index: [index, props.index],\n        sightBox: props.sightBox\n      }, JSON.stringify(tile) + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Determine the wall type for the map\n *\n * @param {*} tiles The tiles the map contains\n */\n_c2 = MapRow;\nfunction getWallType(tiles) {\n  for (let i = 0; i < tiles.length; i++) {\n    for (let j = 0; j < tiles[i].length; j++) {\n      if (typeof (tiles[i][j] === 'number') && tiles[i][j].value === 5) return tiles[i][j].value;\n    }\n  }\n}\nconst mapStateToProps = _ref2 => {\n  let {\n    world,\n    map\n  } = _ref2;\n  return {\n    world,\n    map\n  };\n};\nexport default connect(mapStateToProps)(GameMap);\nvar _c, _c2;\n$RefreshReg$(_c, \"GameMap\");\n$RefreshReg$(_c2, \"MapRow\");","map":{"version":3,"names":["React","connect","MapTile","MapPadding","SPRITE_SIZE","MAP_HEIGHT","MAP_WIDTH","jsxDEV","_jsxDEV","GameMap","_ref","map","world","gameMode","storyMaps","randomMaps","currentMap","floorNum","mapStyle","width","height","position","style","fileName","_jsxFileName","lineNumber","columnNumber","wallType","_objectSpread","tileType","getWallType","tiles","children","paddingTiles","sightBox","paddingSightBox","row","index","MapRow","JSON","stringify","_c","props","className","tile","_c2","i","length","j","value","mapStateToProps","_ref2","$RefreshReg$"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/map/index.jsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport MapTile from './map-tile';\nimport MapPadding from './map-padding';\nimport { SPRITE_SIZE, MAP_HEIGHT, MAP_WIDTH } from '../../config/constants';\n\nconst GameMap = ({ map, world }) => {\n  const { gameMode, storyMaps, randomMaps, currentMap, floorNum } = world;\n\n  const mapStyle = {\n    width: MAP_WIDTH,\n    height: MAP_HEIGHT,\n    position: 'relative',\n  };\n\n  if (!currentMap) return <div style={mapStyle} />;\n\n  let wallType = null;\n\n  if (gameMode === 'story') {\n    map = { ...map, ...storyMaps[currentMap] };\n    wallType = map.wallType;\n  } else {\n    map = { ...map, ...randomMaps[floorNum - 1] };\n    // Give the player a variety of walls while they traverse endless mode\n    if (floorNum < 30) wallType = 'brick';\n    else if (floorNum < 60) wallType = 'ornate';\n    else if (floorNum < 90) wallType = 'purple';\n    else if (floorNum >= 90) wallType = 'inca-dark';\n  }\n\n  const tileType = getWallType(map.tiles);\n\n  return (\n    <div style={mapStyle}>\n      <MapPadding\n        tileType={tileType}\n        wallType={wallType}\n        tiles={map.paddingTiles}\n        sightBox={map.paddingSightBox}\n      />\n\n      {map.tiles.map((row, index) => {\n        return (\n          <MapRow\n            tiles={row}\n            wallType={wallType}\n            index={index}\n            sightBox={map.sightBox}\n            key={JSON.stringify(row) + index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst MapRow = (props) => {\n  return (\n    <div className=\"row\" style={{ height: SPRITE_SIZE }}>\n      {props.tiles.map((tile, index) => {\n        return (\n          <MapTile\n            tile={tile}\n            wallType={props.wallType}\n            index={[index, props.index]}\n            sightBox={props.sightBox}\n            key={JSON.stringify(tile) + index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * Determine the wall type for the map\n *\n * @param {*} tiles The tiles the map contains\n */\nfunction getWallType(tiles) {\n  for (let i = 0; i < tiles.length; i++) {\n    for (let j = 0; j < tiles[i].length; j++) {\n      if (typeof (tiles[i][j] === 'number') && tiles[i][j].value === 5) return tiles[i][j].value;\n    }\n  }\n}\n\nconst mapStateToProps = ({ world, map }) => ({ world, map });\n\nexport default connect(mapStateToProps)(GameMap);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}