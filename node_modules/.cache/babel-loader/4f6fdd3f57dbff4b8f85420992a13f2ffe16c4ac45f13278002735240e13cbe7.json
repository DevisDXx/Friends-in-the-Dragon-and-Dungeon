{"ast":null,"code":"import calculateModifier from '../../../utils/calculate-modifier';\nimport calculatePrices from '../../../utils/calculate-prices';\nexport default function buyItem(item) {\n  return (dispatch, getState) => {\n    const {\n      stats,\n      inventory\n    } = getState();\n    const {\n      gold\n    } = stats;\n    const {\n      items,\n      maxItems\n    } = inventory;\n    const {\n      buyPrice\n    } = calculatePrices(item.value, calculateModifier(stats.abilities.charisma));\n\n    // make sure player has enough gold\n    if (gold >= buyPrice) {\n      // if it's a backpack upgrade\n      if (item.type === 'upgrade::backpack') {\n        dispatch({\n          type: 'LOSE_GOLD',\n          payload: buyPrice\n        });\n        dispatch({\n          type: 'UPGRADE_PACK',\n          payload: {\n            slots: item.slots\n          }\n        });\n      } // otherwise, see if there's room in the inventory\n      else if (items.length < maxItems) {\n        dispatch({\n          type: 'LOSE_GOLD',\n          payload: buyPrice\n        });\n        dispatch({\n          type: 'GET_ITEM',\n          payload: item\n        });\n      } else {\n        dispatch({\n          type: 'TOO_MANY_ITEMS',\n          payload: item\n        });\n      }\n    } else {\n      dispatch({\n        type: 'NOT_ENOUGH_GOLD',\n        payload: item\n      });\n    }\n  };\n}","map":{"version":3,"names":["calculateModifier","calculatePrices","buyItem","item","dispatch","getState","stats","inventory","gold","items","maxItems","buyPrice","value","abilities","charisma","type","payload","slots","length"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/inventory/actions/buy-item.jsx"],"sourcesContent":["import calculateModifier from '../../../utils/calculate-modifier';\nimport calculatePrices from '../../../utils/calculate-prices';\n\nexport default function buyItem(item) {\n  return (dispatch, getState) => {\n    const { stats, inventory } = getState();\n    const { gold } = stats;\n    const { items, maxItems } = inventory;\n\n    const { buyPrice } = calculatePrices(item.value, calculateModifier(stats.abilities.charisma));\n\n    // make sure player has enough gold\n    if (gold >= buyPrice) {\n      // if it's a backpack upgrade\n      if (item.type === 'upgrade::backpack') {\n        dispatch({\n          type: 'LOSE_GOLD',\n          payload: buyPrice,\n        });\n        dispatch({\n          type: 'UPGRADE_PACK',\n          payload: { slots: item.slots },\n        });\n      } // otherwise, see if there's room in the inventory\n      else if (items.length < maxItems) {\n        dispatch({\n          type: 'LOSE_GOLD',\n          payload: buyPrice,\n        });\n        dispatch({\n          type: 'GET_ITEM',\n          payload: item,\n        });\n      } else {\n        dispatch({\n          type: 'TOO_MANY_ITEMS',\n          payload: item,\n        });\n      }\n    } else {\n      dispatch({\n        type: 'NOT_ENOUGH_GOLD',\n        payload: item,\n      });\n    }\n  };\n}\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,mCAAmC;AACjE,OAAOC,eAAe,MAAM,iCAAiC;AAE7D,eAAe,SAASC,OAAOA,CAACC,IAAI,EAAE;EACpC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,MAAM;MAAEC,KAAK;MAAEC;IAAU,CAAC,GAAGF,QAAQ,CAAC,CAAC;IACvC,MAAM;MAAEG;IAAK,CAAC,GAAGF,KAAK;IACtB,MAAM;MAAEG,KAAK;MAAEC;IAAS,CAAC,GAAGH,SAAS;IAErC,MAAM;MAAEI;IAAS,CAAC,GAAGV,eAAe,CAACE,IAAI,CAACS,KAAK,EAAEZ,iBAAiB,CAACM,KAAK,CAACO,SAAS,CAACC,QAAQ,CAAC,CAAC;;IAE7F;IACA,IAAIN,IAAI,IAAIG,QAAQ,EAAE;MACpB;MACA,IAAIR,IAAI,CAACY,IAAI,KAAK,mBAAmB,EAAE;QACrCX,QAAQ,CAAC;UACPW,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAEL;QACX,CAAC,CAAC;QACFP,QAAQ,CAAC;UACPW,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YAAEC,KAAK,EAAEd,IAAI,CAACc;UAAM;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC;MAAA,KACG,IAAIR,KAAK,CAACS,MAAM,GAAGR,QAAQ,EAAE;QAChCN,QAAQ,CAAC;UACPW,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAEL;QACX,CAAC,CAAC;QACFP,QAAQ,CAAC;UACPW,IAAI,EAAE,UAAU;UAChBC,OAAO,EAAEb;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACLC,QAAQ,CAAC;UACPW,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAEb;QACX,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACLC,QAAQ,CAAC;QACPW,IAAI,EAAE,iBAAiB;QACvBC,OAAO,EAAEb;MACX,CAAC,CAAC;IACJ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}