{"ast":null,"code":"import generateMonsters from '../../map/random-map-gen/generate-monsters';\nexport default function loadMonsters() {\n  return (dispatch, getState) => {\n    const {\n      world,\n      monsters,\n      player,\n      stats\n    } = getState();\n    const {\n      gameMode,\n      currentMap,\n      randomMaps,\n      floorNum,\n      storyMaps\n    } = world;\n    if (!monsters.components[currentMap]) {\n      // if it's endless mode and we don't have monsters for the current map\n      if (gameMode === 'endless') {\n        // let's generate some monsters and set them!\n        dispatch({\n          type: 'ADD_MONSTERS',\n          payload: {\n            monsters: generateMonsters(floorNum, randomMaps[floorNum - 1].tiles, player.position, stats.level),\n            map: currentMap\n          }\n        });\n      } // load monsters for the story map\n      else {\n        dispatch({\n          type: 'ADD_MONSTERS',\n          payload: {\n            monsters: storyMaps[currentMap].monsters,\n            map: currentMap\n          }\n        });\n      }\n    }\n  };\n}","map":{"version":3,"names":["generateMonsters","loadMonsters","dispatch","getState","world","monsters","player","stats","gameMode","currentMap","randomMaps","floorNum","storyMaps","components","type","payload","tiles","position","level","map"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/actions/load-monsters.jsx"],"sourcesContent":["import generateMonsters from '../../map/random-map-gen/generate-monsters';\n\nexport default function loadMonsters() {\n    return (dispatch, getState) => {\n        const { world, monsters, player, stats } = getState();\n        const { gameMode, currentMap, randomMaps, floorNum, storyMaps } = world;\n\n        if (!monsters.components[currentMap]) {\n            // if it's endless mode and we don't have monsters for the current map\n            if (gameMode === 'endless') {\n                // let's generate some monsters and set them!\n                dispatch({\n                    type: 'ADD_MONSTERS',\n                    payload: {\n                        monsters: generateMonsters(\n                            floorNum,\n                            randomMaps[floorNum - 1].tiles,\n                            player.position,\n                            stats.level\n                        ),\n                        map: currentMap,\n                    },\n                });\n            } // load monsters for the story map\n            else {\n                dispatch({\n                    type: 'ADD_MONSTERS',\n                    payload: {\n                        monsters: storyMaps[currentMap].monsters,\n                        map: currentMap,\n                    },\n                });\n            }\n        }\n    };\n}\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,4CAA4C;AAEzE,eAAe,SAASC,YAAYA,CAAA,EAAG;EACnC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3B,MAAM;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAGJ,QAAQ,CAAC,CAAC;IACrD,MAAM;MAAEK,QAAQ;MAAEC,UAAU;MAAEC,UAAU;MAAEC,QAAQ;MAAEC;IAAU,CAAC,GAAGR,KAAK;IAEvE,IAAI,CAACC,QAAQ,CAACQ,UAAU,CAACJ,UAAU,CAAC,EAAE;MAClC;MACA,IAAID,QAAQ,KAAK,SAAS,EAAE;QACxB;QACAN,QAAQ,CAAC;UACLY,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YACLV,QAAQ,EAAEL,gBAAgB,CACtBW,QAAQ,EACRD,UAAU,CAACC,QAAQ,GAAG,CAAC,CAAC,CAACK,KAAK,EAC9BV,MAAM,CAACW,QAAQ,EACfV,KAAK,CAACW,KACV,CAAC;YACDC,GAAG,EAAEV;UACT;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAAA,KACG;QACDP,QAAQ,CAAC;UACLY,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YACLV,QAAQ,EAAEO,SAAS,CAACH,UAAU,CAAC,CAACJ,QAAQ;YACxCc,GAAG,EAAEV;UACT;QACJ,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}