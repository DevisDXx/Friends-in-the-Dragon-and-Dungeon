{"ast":null,"code":"import randomItem from '../dialogs/chest-loot/random-item';\nimport { spriteToCoordinates } from '../../../utils/sprite-to-coordinates';\nexport default function openChest() {\n  return (dispatch, getState) => {\n    const {\n      stats,\n      dialog,\n      player\n    } = getState();\n    const {\n      level\n    } = stats;\n    const {\n      chestOpen\n    } = dialog;\n    const {\n      item\n    } = chestOpen;\n    const {\n      x,\n      y\n    } = spriteToCoordinates(player.position);\n    let itemDrop = null;\n    if ((x !== chestOpen.x || y !== chestOpen.y) && (item === undefined || item === null)) {\n      // Give the player a 25% chance to get a random item, only if there isn't an item already in it\n      const chance = Math.floor(Math.random() * 100) + 1;\n      if (chance <= 25) {\n        itemDrop = randomItem(level);\n      }\n    } else {\n      // An item is already in the chest, so let's use it\n      itemDrop = item;\n    }\n\n    // get a random amount of gold between 1 and 8 PLUS player level x3\n    const gold = Math.floor(Math.random() * 8) + 1 + level * 3;\n    // get some level based exp\n    const exp = level * 5 + 5;\n    dispatch({\n      type: 'SET_CHEST_DATA',\n      payload: {\n        exp,\n        gold,\n        item: itemDrop,\n        x: x,\n        y: y\n      }\n    });\n  };\n}","map":{"version":3,"names":["randomItem","spriteToCoordinates","openChest","dispatch","getState","stats","dialog","player","level","chestOpen","item","x","y","position","itemDrop","undefined","chance","Math","floor","random","gold","exp","type","payload"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/dialog-manager/actions/open-chest.jsx"],"sourcesContent":["import randomItem from '../dialogs/chest-loot/random-item';\nimport { spriteToCoordinates } from '../../../utils/sprite-to-coordinates';\n\nexport default function openChest() {\n    return (dispatch, getState) => {\n        const { stats, dialog, player } = getState();\n        const { level } = stats;\n\n        const { chestOpen } = dialog;\n        const { item } = chestOpen;\n\n        const { x, y } = spriteToCoordinates(player.position);\n\n        let itemDrop = null;\n        if (\n            (x !== chestOpen.x || y !== chestOpen.y) &&\n            (item === undefined || item === null)\n        ) {\n            // Give the player a 25% chance to get a random item, only if there isn't an item already in it\n            const chance = Math.floor(Math.random() * 100) + 1;\n            if (chance <= 25) {\n                itemDrop = randomItem(level);\n            }\n        } else {\n            // An item is already in the chest, so let's use it\n            itemDrop = item;\n        }\n\n        // get a random amount of gold between 1 and 8 PLUS player level x3\n        const gold = Math.floor(Math.random() * 8) + 1 + level * 3;\n        // get some level based exp\n        const exp = level * 5 + 5;\n\n        dispatch({\n            type: 'SET_CHEST_DATA',\n            payload: {\n                exp,\n                gold,\n                item: itemDrop,\n                x: x,\n                y: y,\n            },\n        });\n    };\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,mCAAmC;AAC1D,SAASC,mBAAmB,QAAQ,sCAAsC;AAE1E,eAAe,SAASC,SAASA,CAAA,EAAG;EAChC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3B,MAAM;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGH,QAAQ,CAAC,CAAC;IAC5C,MAAM;MAAEI;IAAM,CAAC,GAAGH,KAAK;IAEvB,MAAM;MAAEI;IAAU,CAAC,GAAGH,MAAM;IAC5B,MAAM;MAAEI;IAAK,CAAC,GAAGD,SAAS;IAE1B,MAAM;MAAEE,CAAC;MAAEC;IAAE,CAAC,GAAGX,mBAAmB,CAACM,MAAM,CAACM,QAAQ,CAAC;IAErD,IAAIC,QAAQ,GAAG,IAAI;IACnB,IACI,CAACH,CAAC,KAAKF,SAAS,CAACE,CAAC,IAAIC,CAAC,KAAKH,SAAS,CAACG,CAAC,MACtCF,IAAI,KAAKK,SAAS,IAAIL,IAAI,KAAK,IAAI,CAAC,EACvC;MACE;MACA,MAAMM,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;MAClD,IAAIH,MAAM,IAAI,EAAE,EAAE;QACdF,QAAQ,GAAGd,UAAU,CAACQ,KAAK,CAAC;MAChC;IACJ,CAAC,MAAM;MACH;MACAM,QAAQ,GAAGJ,IAAI;IACnB;;IAEA;IACA,MAAMU,IAAI,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAGX,KAAK,GAAG,CAAC;IAC1D;IACA,MAAMa,GAAG,GAAGb,KAAK,GAAG,CAAC,GAAG,CAAC;IAEzBL,QAAQ,CAAC;MACLmB,IAAI,EAAE,gBAAgB;MACtBC,OAAO,EAAE;QACLF,GAAG;QACHD,IAAI;QACJV,IAAI,EAAEI,QAAQ;QACdH,CAAC,EAAEA,CAAC;QACJC,CAAC,EAAEA;MACP;IACJ,CAAC,CAAC;EACN,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}