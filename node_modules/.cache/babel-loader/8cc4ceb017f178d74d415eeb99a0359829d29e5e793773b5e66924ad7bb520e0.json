{"ast":null,"code":"import moveNormally from './normal-ai';\nimport { calculateDamage } from '../../../utils/dice';\nimport { TURNS_FOR_POISON, POISON_DAMAGE, SPRITE_SIZE } from '../../../config/constants';\n\n/**\n * An AI used for monsters that have been poisoned, and will apply poison damage over time\n *\n * @param {*} sightBox The players FOV\n * @param {*} currentMap The map the player is in\n * @param {*} monster The monster we're moving\n */\nexport default function poisoned(sightBox, currentMap, monster) {\n  return (dispatch, getState) => {\n    const {\n      stats\n    } = getState();\n    dispatch(moveNormally(sightBox, currentMap, monster));\n    let dead = false;\n    if (monster.aiTurns % TURNS_FOR_POISON === TURNS_FOR_POISON - 1) {\n      const damage = calculateDamage(POISON_DAMAGE);\n      dispatch({\n        type: 'DAMAGE_TO_MONSTER',\n        payload: {\n          damage,\n          id: monster.id,\n          map: currentMap,\n          entity: monster.type,\n          from: 'poison'\n        }\n      });\n      if (monster.hp - damage <= 0) {\n        dead = true;\n        // and get some exp\n        dispatch({\n          type: 'GET_EXP',\n          payload: monster.exp\n        });\n        if (stats.exp + monster.exp >= stats.expToLevel) {\n          dispatch({\n            type: 'PAUSE',\n            payload: {\n              pause: true,\n              levelUp: true\n            }\n          });\n        }\n        // play death sound\n        dispatch({\n          type: 'MONSTER_DIED',\n          payload: monster.type\n        });\n\n        // replace monster will blood spill\n        // need to pass relative tile index\n        dispatch({\n          type: 'ADD_BLOOD_SPILL',\n          payload: {\n            x: monster.position[0] / SPRITE_SIZE,\n            y: monster.position[1] / SPRITE_SIZE\n          }\n        });\n      }\n    }\n    if (!dead && monster.aiTurns === 0) {\n      dispatch({\n        type: 'CHANGE_AI',\n        payload: {\n          map: currentMap,\n          ai: monster.originalAI,\n          id: monster.id,\n          from: 'poisoned',\n          turns: 0,\n          entity: monster.type,\n          original: monster.originalAI\n        }\n      });\n    }\n  };\n}","map":{"version":3,"names":["moveNormally","calculateDamage","TURNS_FOR_POISON","POISON_DAMAGE","SPRITE_SIZE","poisoned","sightBox","currentMap","monster","dispatch","getState","stats","dead","aiTurns","damage","type","payload","id","map","entity","from","hp","exp","expToLevel","pause","levelUp","x","position","y","ai","originalAI","turns","original"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/actions/poisoned-ai.jsx"],"sourcesContent":["import moveNormally from './normal-ai';\nimport { calculateDamage } from '../../../utils/dice';\nimport { TURNS_FOR_POISON, POISON_DAMAGE, SPRITE_SIZE } from '../../../config/constants';\n\n/**\n * An AI used for monsters that have been poisoned, and will apply poison damage over time\n *\n * @param {*} sightBox The players FOV\n * @param {*} currentMap The map the player is in\n * @param {*} monster The monster we're moving\n */\nexport default function poisoned(sightBox, currentMap, monster) {\n  return (dispatch, getState) => {\n    const { stats } = getState();\n\n    dispatch(moveNormally(sightBox, currentMap, monster));\n\n    let dead = false;\n\n    if (monster.aiTurns % TURNS_FOR_POISON === TURNS_FOR_POISON - 1) {\n      const damage = calculateDamage(POISON_DAMAGE);\n\n      dispatch({\n        type: 'DAMAGE_TO_MONSTER',\n        payload: {\n          damage,\n          id: monster.id,\n          map: currentMap,\n          entity: monster.type,\n          from: 'poison',\n        },\n      });\n\n      if (monster.hp - damage <= 0) {\n        dead = true;\n        // and get some exp\n        dispatch({\n          type: 'GET_EXP',\n          payload: monster.exp,\n        });\n\n        if (stats.exp + monster.exp >= stats.expToLevel) {\n          dispatch({\n            type: 'PAUSE',\n            payload: {\n              pause: true,\n              levelUp: true,\n            },\n          });\n        }\n        // play death sound\n        dispatch({\n          type: 'MONSTER_DIED',\n          payload: monster.type,\n        });\n\n        // replace monster will blood spill\n        // need to pass relative tile index\n        dispatch({\n          type: 'ADD_BLOOD_SPILL',\n          payload: {\n            x: monster.position[0] / SPRITE_SIZE,\n            y: monster.position[1] / SPRITE_SIZE,\n          },\n        });\n      }\n    }\n\n    if (!dead && monster.aiTurns === 0) {\n      dispatch({\n        type: 'CHANGE_AI',\n        payload: {\n          map: currentMap,\n          ai: monster.originalAI,\n          id: monster.id,\n          from: 'poisoned',\n          turns: 0,\n          entity: monster.type,\n          original: monster.originalAI,\n        },\n      });\n    }\n  };\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,aAAa;AACtC,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SAASC,gBAAgB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,2BAA2B;;AAExF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,QAAQA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC9D,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,MAAM;MAAEC;IAAM,CAAC,GAAGD,QAAQ,CAAC,CAAC;IAE5BD,QAAQ,CAACT,YAAY,CAACM,QAAQ,EAAEC,UAAU,EAAEC,OAAO,CAAC,CAAC;IAErD,IAAII,IAAI,GAAG,KAAK;IAEhB,IAAIJ,OAAO,CAACK,OAAO,GAAGX,gBAAgB,KAAKA,gBAAgB,GAAG,CAAC,EAAE;MAC/D,MAAMY,MAAM,GAAGb,eAAe,CAACE,aAAa,CAAC;MAE7CM,QAAQ,CAAC;QACPM,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAE;UACPF,MAAM;UACNG,EAAE,EAAET,OAAO,CAACS,EAAE;UACdC,GAAG,EAAEX,UAAU;UACfY,MAAM,EAAEX,OAAO,CAACO,IAAI;UACpBK,IAAI,EAAE;QACR;MACF,CAAC,CAAC;MAEF,IAAIZ,OAAO,CAACa,EAAE,GAAGP,MAAM,IAAI,CAAC,EAAE;QAC5BF,IAAI,GAAG,IAAI;QACX;QACAH,QAAQ,CAAC;UACPM,IAAI,EAAE,SAAS;UACfC,OAAO,EAAER,OAAO,CAACc;QACnB,CAAC,CAAC;QAEF,IAAIX,KAAK,CAACW,GAAG,GAAGd,OAAO,CAACc,GAAG,IAAIX,KAAK,CAACY,UAAU,EAAE;UAC/Cd,QAAQ,CAAC;YACPM,IAAI,EAAE,OAAO;YACbC,OAAO,EAAE;cACPQ,KAAK,EAAE,IAAI;cACXC,OAAO,EAAE;YACX;UACF,CAAC,CAAC;QACJ;QACA;QACAhB,QAAQ,CAAC;UACPM,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAER,OAAO,CAACO;QACnB,CAAC,CAAC;;QAEF;QACA;QACAN,QAAQ,CAAC;UACPM,IAAI,EAAE,iBAAiB;UACvBC,OAAO,EAAE;YACPU,CAAC,EAAElB,OAAO,CAACmB,QAAQ,CAAC,CAAC,CAAC,GAAGvB,WAAW;YACpCwB,CAAC,EAAEpB,OAAO,CAACmB,QAAQ,CAAC,CAAC,CAAC,GAAGvB;UAC3B;QACF,CAAC,CAAC;MACJ;IACF;IAEA,IAAI,CAACQ,IAAI,IAAIJ,OAAO,CAACK,OAAO,KAAK,CAAC,EAAE;MAClCJ,QAAQ,CAAC;QACPM,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE;UACPE,GAAG,EAAEX,UAAU;UACfsB,EAAE,EAAErB,OAAO,CAACsB,UAAU;UACtBb,EAAE,EAAET,OAAO,CAACS,EAAE;UACdG,IAAI,EAAE,UAAU;UAChBW,KAAK,EAAE,CAAC;UACRZ,MAAM,EAAEX,OAAO,CAACO,IAAI;UACpBiB,QAAQ,EAAExB,OAAO,CAACsB;QACpB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}