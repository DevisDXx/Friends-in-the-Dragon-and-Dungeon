{"ast":null,"code":"import moveNormally from './normal-ai';\nimport frozen from './frozen-ai';\nimport poisoned from './poisoned-ai';\nimport shocked from './shocked-ai';\nimport scared from './scared-ai';\nimport suicidal from './suicidal-ai';\nimport magical from './magical-ai';\nimport healer from './healer-ai';\nimport ranged from './ranged-ai';\nimport frightened from './frightened-ai';\nexport default function takeMonstersTurn() {\n  return (dispatch, getState) => {\n    const {\n      monsters,\n      map,\n      world\n    } = getState();\n    // get the current monsters\n    const {\n      components\n    } = monsters;\n    const {\n      sightBox\n    } = map;\n    const {\n      currentMap\n    } = world;\n    // find each monster\n\n    Object.keys(components[currentMap]).forEach(monsterID => {\n      const monster = getState().monsters.components[currentMap][monsterID];\n      // In the case that one of the other monsters before this one attacked it and killed it\n      if (monster === undefined) return;\n      switch (monster.ai) {\n        case 'suicidal':\n          dispatch(suicidal(sightBox, currentMap, monster));\n          break;\n        case 'ranged':\n          dispatch(ranged(sightBox, currentMap, monster));\n          break;\n        case 'boss':\n        case 'normal':\n          dispatch(moveNormally(sightBox, currentMap, monster));\n          break;\n        case 'frozen':\n          dispatch(frozen(sightBox, currentMap, monster));\n          break;\n        case 'poisoned':\n          dispatch(poisoned(sightBox, currentMap, monster));\n          break;\n        case 'frightened':\n          dispatch(frightened(sightBox, currentMap, monster));\n          break;\n        case 'shocked':\n          dispatch(shocked(sightBox, currentMap, monster));\n          break;\n        case 'scared':\n          dispatch(scared(sightBox, currentMap, monster));\n          break;\n        case 'magical':\n          dispatch(magical(sightBox, currentMap, monster));\n          break;\n        case 'healer':\n          dispatch(healer(sightBox, currentMap, monster));\n          break;\n        default:\n          break;\n      }\n    });\n  };\n}","map":{"version":3,"names":["moveNormally","frozen","poisoned","shocked","scared","suicidal","magical","healer","ranged","frightened","takeMonstersTurn","dispatch","getState","monsters","map","world","components","sightBox","currentMap","Object","keys","forEach","monsterID","monster","undefined","ai"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/actions/take-monsters-turn.jsx"],"sourcesContent":["import moveNormally from './normal-ai';\nimport frozen from './frozen-ai';\nimport poisoned from './poisoned-ai';\nimport shocked from './shocked-ai';\nimport scared from './scared-ai';\nimport suicidal from './suicidal-ai';\nimport magical from './magical-ai';\nimport healer from './healer-ai';\nimport ranged from './ranged-ai';\nimport frightened from './frightened-ai';\n\nexport default function takeMonstersTurn() {\n  return (dispatch, getState) => {\n    const { monsters, map, world } = getState();\n    // get the current monsters\n    const { components } = monsters;\n    const { sightBox } = map;\n    const { currentMap } = world;\n    // find each monster\n\n    Object.keys(components[currentMap]).forEach((monsterID) => {\n      const monster = getState().monsters.components[currentMap][monsterID];\n      // In the case that one of the other monsters before this one attacked it and killed it\n      if (monster === undefined) return;\n\n      switch (monster.ai) {\n        case 'suicidal':\n          dispatch(suicidal(sightBox, currentMap, monster));\n          break;\n        case 'ranged':\n          dispatch(ranged(sightBox, currentMap, monster));\n          break;\n        case 'boss':\n        case 'normal':\n          dispatch(moveNormally(sightBox, currentMap, monster));\n          break;\n        case 'frozen':\n          dispatch(frozen(sightBox, currentMap, monster));\n          break;\n        case 'poisoned':\n          dispatch(poisoned(sightBox, currentMap, monster));\n          break;\n        case 'frightened':\n          dispatch(frightened(sightBox, currentMap, monster));\n          break;\n        case 'shocked':\n          dispatch(shocked(sightBox, currentMap, monster));\n          break;\n        case 'scared':\n          dispatch(scared(sightBox, currentMap, monster));\n          break;\n        case 'magical':\n          dispatch(magical(sightBox, currentMap, monster));\n          break;\n        case 'healer':\n          dispatch(healer(sightBox, currentMap, monster));\n          break;\n        default:\n          break;\n      }\n    });\n  };\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,aAAa;AACtC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,UAAU,MAAM,iBAAiB;AAExC,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EACzC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,MAAM;MAAEC,QAAQ;MAAEC,GAAG;MAAEC;IAAM,CAAC,GAAGH,QAAQ,CAAC,CAAC;IAC3C;IACA,MAAM;MAAEI;IAAW,CAAC,GAAGH,QAAQ;IAC/B,MAAM;MAAEI;IAAS,CAAC,GAAGH,GAAG;IACxB,MAAM;MAAEI;IAAW,CAAC,GAAGH,KAAK;IAC5B;;IAEAI,MAAM,CAACC,IAAI,CAACJ,UAAU,CAACE,UAAU,CAAC,CAAC,CAACG,OAAO,CAAEC,SAAS,IAAK;MACzD,MAAMC,OAAO,GAAGX,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAACG,UAAU,CAACE,UAAU,CAAC,CAACI,SAAS,CAAC;MACrE;MACA,IAAIC,OAAO,KAAKC,SAAS,EAAE;MAE3B,QAAQD,OAAO,CAACE,EAAE;QAChB,KAAK,UAAU;UACbd,QAAQ,CAACN,QAAQ,CAACY,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UACjD;QACF,KAAK,QAAQ;UACXZ,QAAQ,CAACH,MAAM,CAACS,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UAC/C;QACF,KAAK,MAAM;QACX,KAAK,QAAQ;UACXZ,QAAQ,CAACX,YAAY,CAACiB,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UACrD;QACF,KAAK,QAAQ;UACXZ,QAAQ,CAACV,MAAM,CAACgB,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UAC/C;QACF,KAAK,UAAU;UACbZ,QAAQ,CAACT,QAAQ,CAACe,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UACjD;QACF,KAAK,YAAY;UACfZ,QAAQ,CAACF,UAAU,CAACQ,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UACnD;QACF,KAAK,SAAS;UACZZ,QAAQ,CAACR,OAAO,CAACc,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UAChD;QACF,KAAK,QAAQ;UACXZ,QAAQ,CAACP,MAAM,CAACa,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UAC/C;QACF,KAAK,SAAS;UACZZ,QAAQ,CAACL,OAAO,CAACW,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UAChD;QACF,KAAK,QAAQ;UACXZ,QAAQ,CAACJ,MAAM,CAACU,QAAQ,EAAEC,UAAU,EAAEK,OAAO,CAAC,CAAC;UAC/C;QACF;UACE;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}