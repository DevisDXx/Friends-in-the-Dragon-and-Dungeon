{"ast":null,"code":"import _cloneDeep from 'lodash.clonedeep';\nimport { SPRITE_SIZE } from '../../config/constants';\nimport monsterData from '../../data/monsters';\nimport uuidv4 from '../../utils/uuid-v4.js';\nconst initialState = {\n  components: {}\n};\nconst monstersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n  switch (type) {\n    case 'MOVE_MONSTER':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].position = payload.position;\n      newState.components[payload.map][payload.id].aiTurns -= 1;\n      newState.components[payload.map][payload.id].direction = payload.direction;\n      return newState;\n    case 'DAMAGE_TO_MONSTER':\n      newState = _cloneDeep(state);\n      // subtract the damage from monster hp\n      newState.components[payload.map][payload.id].hp -= payload.damage;\n      // if monster has 0 or less hp, kill it\n      if (newState.components[payload.map][payload.id].hp <= 0) {\n        delete newState.components[payload.map][payload.id];\n      }\n      return newState;\n    case 'MONSTER_HEAL_HP':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].hp += payload.healAmount;\n      const health = newState.components[payload.map][payload.id].hp;\n      const maxHealth = newState.components[payload.map][payload.id].maxHp;\n      if (health > maxHealth) {\n        newState.components[payload.map][payload.id].hp = maxHealth;\n      }\n      return newState;\n\n    // load a new set of monsters\n    case 'ADD_MONSTERS':\n      newState = _cloneDeep(state);\n      // save monsters by the map\n      if (!newState.components[payload.map]) {\n        newState.components[payload.map] = {};\n        // render monsters\n        payload.monsters.forEach(monster => {\n          // generate a unique id (for tracking purposes)\n          const uuid = uuidv4();\n          // merge the id, monster stats, and position\n          // set the position from tile(x,y) to actual pixel size\n          monster = {\n            id: uuid,\n            position: monster.position.map(value => value * SPRITE_SIZE),\n            ...monsterData[monster.type]\n          };\n          newState.components[payload.map][uuid] = monster;\n        });\n      }\n      return newState;\n    case 'REVEAL_MONSTER':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].visible = true;\n      return newState;\n    case 'HIDE_MONSTER':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].visible = false;\n      return newState;\n    case 'CHANGE_AI':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].ai = payload.ai;\n      newState.components[payload.map][payload.id].aiTurns = payload.turns;\n      return newState;\n    case 'RESET':\n      return initialState;\n    case 'LOAD_DATA':\n      return {\n        ...initialState,\n        ...payload.monsters\n      };\n    default:\n      return state;\n  }\n};\nexport default monstersReducer;","map":{"version":3,"names":["_cloneDeep","SPRITE_SIZE","monsterData","uuidv4","initialState","components","monstersReducer","state","arguments","length","undefined","type","payload","newState","map","id","position","aiTurns","direction","hp","damage","healAmount","health","maxHealth","maxHp","monsters","forEach","monster","uuid","value","visible","ai","turns"],"sources":["C:/Users/devis/Downloads/react-rpg.com-master/src/features/monsters/reducer.jsx"],"sourcesContent":["import _cloneDeep from 'lodash.clonedeep';\n\nimport { SPRITE_SIZE } from '../../config/constants';\nimport monsterData from '../../data/monsters';\nimport uuidv4 from '../../utils/uuid-v4.js';\n\nconst initialState = {\n  components: {},\n};\n\nconst monstersReducer = (state = initialState, { type, payload }) => {\n  let newState;\n\n  switch (type) {\n    case 'MOVE_MONSTER':\n      newState = _cloneDeep(state);\n\n      newState.components[payload.map][payload.id].position = payload.position;\n\n      newState.components[payload.map][payload.id].aiTurns -= 1;\n\n      newState.components[payload.map][payload.id].direction = payload.direction;\n\n      return newState;\n\n    case 'DAMAGE_TO_MONSTER':\n      newState = _cloneDeep(state);\n      // subtract the damage from monster hp\n      newState.components[payload.map][payload.id].hp -= payload.damage;\n      // if monster has 0 or less hp, kill it\n      if (newState.components[payload.map][payload.id].hp <= 0) {\n        delete newState.components[payload.map][payload.id];\n      }\n\n      return newState;\n\n    case 'MONSTER_HEAL_HP':\n      newState = _cloneDeep(state);\n      newState.components[payload.map][payload.id].hp += payload.healAmount;\n      const health = newState.components[payload.map][payload.id].hp;\n      const maxHealth = newState.components[payload.map][payload.id].maxHp;\n      if (health > maxHealth) {\n        newState.components[payload.map][payload.id].hp = maxHealth;\n      }\n\n      return newState;\n\n    // load a new set of monsters\n    case 'ADD_MONSTERS':\n      newState = _cloneDeep(state);\n      // save monsters by the map\n      if (!newState.components[payload.map]) {\n        newState.components[payload.map] = {};\n        // render monsters\n        payload.monsters.forEach((monster) => {\n          // generate a unique id (for tracking purposes)\n          const uuid = uuidv4();\n          // merge the id, monster stats, and position\n          // set the position from tile(x,y) to actual pixel size\n          monster = {\n            id: uuid,\n            position: monster.position.map((value) => value * SPRITE_SIZE),\n            ...monsterData[monster.type],\n          };\n          newState.components[payload.map][uuid] = monster;\n        });\n      }\n\n      return newState;\n\n    case 'REVEAL_MONSTER':\n      newState = _cloneDeep(state);\n\n      newState.components[payload.map][payload.id].visible = true;\n      return newState;\n\n    case 'HIDE_MONSTER':\n      newState = _cloneDeep(state);\n\n      newState.components[payload.map][payload.id].visible = false;\n      return newState;\n\n    case 'CHANGE_AI':\n      newState = _cloneDeep(state);\n\n      newState.components[payload.map][payload.id].ai = payload.ai;\n      newState.components[payload.map][payload.id].aiTurns = payload.turns;\n      return newState;\n\n    case 'RESET':\n      return initialState;\n\n    case 'LOAD_DATA':\n      return { ...initialState, ...payload.monsters };\n\n    default:\n      return state;\n  }\n};\n\nexport default monstersReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}